---
swagger: "2.0"
info:
  description: "<h1 style=\"margin-top: 2rem\">Introduction</h1>\n<p>The Edgegap API\
    \ lets you manage all your resources from standard HTTP requests. We promote using\
    \ them to automate all your processes that are using Edgegap.</p>\n<p>If you have\
    \ any questions, don't hesitate to contact us via email, or you can also jump\
    \ on our <a href=\"https://discord.com/invite/GYaHcKR9a5\" target=\"_blank\">Discord</a>.\
    \ We will be happy to help. Feel free to make features request; we also love those.</p>\n\
    <div class=\"theme-doc-markdown markdown\"><h2 class=\"anchor anchorWithStickyNavbar_node_modules-@docusaurus-theme-classic-lib-theme-Heading-styles-module\"\
    \ id=\"pagination---response\">Pagination - Response<a class=\"hash-link\" href=\"\
    #pagination---response\" title=\"Direct link to heading\">â€‹</a></h2><p>The GET\
    \ response body can be returned with pagination to avoid requesting all the data\
    \ at once.</p><p>Pagination object will always be under the  <em>paginator</em>\
    \ key.</p><div class=\"language-json codeBlockContainer_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Container-styles-module\
    \ theme-code-block\" style=\"--prism-color:#bfc7d5; --prism-background-color:#292d3e;\"\
    ><div class=\"codeBlockContent_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"\
    ><pre tabindex=\"0\" class=\"prism-code language-json codeBlock_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\
    \ thin-scrollbar\"><code class=\"codeBlockLines_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"\
    ><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"\
    token punctuation\" style=\"color: rgb(199, 146, 234);\">{</span><span class=\"\
    token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191,\
    \ 199, 213);\"><span class=\"token plain\">  </span><span class=\"token property\"\
    >\"number\"</span><span class=\"token operator\" style=\"color: rgb(137, 221,\
    \ 255);\">:</span><span class=\"token plain\"> </span><span class=\"token string\"\
    \ style=\"color: rgb(195, 232, 141);\">\"The Current page, default=1\"</span><span\
    \ class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span\
    \ class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"\
    color: rgb(191, 199, 213);\"><span class=\"token plain\">  </span><span class=\"\
    token property\">\"next_page_number\"</span><span class=\"token operator\" style=\"\
    color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span\
    \ class=\"token string\" style=\"color: rgb(195, 232, 141);\">\"The Next page\
    \ number or null\"</span><span class=\"token punctuation\" style=\"color: rgb(199,\
    \ 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span class=\"\
    token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\"\
    >  </span><span class=\"token property\">\"previous_page_number\"</span><span\
    \ class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span\
    \ class=\"token plain\"> </span><span class=\"token string\" style=\"color: rgb(195,\
    \ 232, 141);\">\"The Previous page number or null\"</span><span class=\"token\
    \ punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token\
    \ plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191,\
    \ 199, 213);\"><span class=\"token plain\">  </span><span class=\"token property\"\
    >\"paginator\"</span><span class=\"token operator\" style=\"color: rgb(137, 221,\
    \ 255);\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\"\
    \ style=\"color: rgb(199, 146, 234);\">{</span><span class=\"token plain\"></span><br></span><span\
    \ class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token\
    \ plain\">    </span><span class=\"token property\">\"num_pages\"</span><span\
    \ class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span\
    \ class=\"token plain\"> </span><span class=\"token string\" style=\"color: rgb(195,\
    \ 232, 141);\">\"The total numbers of pages\"</span><span class=\"token plain\"\
    ></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"\
    ><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"\
    color: rgb(199, 146, 234);\">}</span><span class=\"token punctuation\" style=\"\
    color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span\
    \ class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token\
    \ plain\">  </span><span class=\"token property\">\"has_next\"</span><span class=\"\
    token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token\
    \ plain\"> </span><span class=\"token string\" style=\"color: rgb(195, 232, 141);\"\
    >\"Boolean if there is a next page\"</span><span class=\"token punctuation\" style=\"\
    color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span\
    \ class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token\
    \ plain\">  </span><span class=\"token property\">\"has_previous\"</span><span\
    \ class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span\
    \ class=\"token plain\"> </span><span class=\"token string\" style=\"color: rgb(195,\
    \ 232, 141);\">\"Boolean if there is a previous page\"</span><span class=\"token\
    \ plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191,\
    \ 199, 213);\"><span class=\"token plain\"></span><span class=\"token punctuation\"\
    \ style=\"color: rgb(199, 146, 234);\">}</span><br></span></code></pre><div class=\"\
    buttonGroup_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"\
    ><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\"\
    \ class=\"clean-btn\"><span class=\"copyButtonIcons_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\"\
    \ aria-hidden=\"true\"><svg class=\"copyButtonIcon_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\"\
    \ viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0\
    \ 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"\
    ></path></svg><svg class=\"copyButtonSuccessIcon_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\"\
    \ viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"\
    ></path></svg></span></button></div></div></div><p>Full Body Example:</p><div\
    \ class=\"language-json codeBlockContainer_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Container-styles-module\
    \ theme-code-block\" style=\"--prism-color:#bfc7d5; --prism-background-color:#292d3e;\"\
    ><div class=\"codeBlockContent_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"\
    ><pre tabindex=\"0\" class=\"prism-code language-json codeBlock_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\
    \ thin-scrollbar\"><code class=\"codeBlockLines_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"\
    ><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"\
    token punctuation\" style=\"color: rgb(199, 146, 234);\">{</span><span class=\"\
    token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191,\
    \ 199, 213);\"><span class=\"token plain\">  </span><span class=\"token property\"\
    >\"count\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\"\
    >:</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"\
    color: rgb(247, 140, 108);\">100</span><span class=\"token punctuation\" style=\"\
    color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span\
    \ class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token\
    \ plain\">  </span><span class=\"token property\">\"data\"</span><span class=\"\
    token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token\
    \ plain\"> </span><span class=\"token punctuation\" style=\"color: rgb(199, 146,\
    \ 234);\">[</span><span class=\"token string\" style=\"color: rgb(195, 232, 141);\"\
    >\"value-0\"</span><span class=\"token punctuation\" style=\"color: rgb(199, 146,\
    \ 234);\">,</span><span class=\"token plain\"> </span><span class=\"token string\"\
    \ style=\"color: rgb(195, 232, 141);\">\"[...]\"</span><span class=\"token punctuation\"\
    \ style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"> </span><span\
    \ class=\"token string\" style=\"color: rgb(195, 232, 141);\">\"value-9\"</span><span\
    \ class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">]</span><span\
    \ class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span\
    \ class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"\
    color: rgb(191, 199, 213);\"><span class=\"token plain\">  </span><span class=\"\
    token property\">\"success\"</span><span class=\"token operator\" style=\"color:\
    \ rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"\
    token boolean\" style=\"color: rgb(255, 88, 116);\">true</span><span class=\"\
    token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"\
    token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191,\
    \ 199, 213);\"><span class=\"token plain\">  </span><span class=\"token property\"\
    >\"pagination\"</span><span class=\"token operator\" style=\"color: rgb(137, 221,\
    \ 255);\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\"\
    \ style=\"color: rgb(199, 146, 234);\">{</span><span class=\"token plain\"></span><br></span><span\
    \ class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token\
    \ plain\">    </span><span class=\"token property\">\"number\"</span><span class=\"\
    token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token\
    \ plain\"> </span><span class=\"token number\" style=\"color: rgb(247, 140, 108);\"\
    >1</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\"\
    >,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\"\
    \ style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">    </span><span\
    \ class=\"token property\">\"next_page_number\"</span><span class=\"token operator\"\
    \ style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span\
    \ class=\"token number\" style=\"color: rgb(247, 140, 108);\">2</span><span class=\"\
    token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"\
    token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191,\
    \ 199, 213);\"><span class=\"token plain\">    </span><span class=\"token property\"\
    >\"previous_page_number\"</span><span class=\"token operator\" style=\"color:\
    \ rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"\
    token null keyword\" style=\"font-style: italic;\">null</span><span class=\"token\
    \ punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token\
    \ plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191,\
    \ 199, 213);\"><span class=\"token plain\">    </span><span class=\"token property\"\
    >\"paginator\"</span><span class=\"token operator\" style=\"color: rgb(137, 221,\
    \ 255);\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\"\
    \ style=\"color: rgb(199, 146, 234);\">{</span><span class=\"token plain\"></span><br></span><span\
    \ class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token\
    \ plain\">      </span><span class=\"token property\">\"num_pages\"</span><span\
    \ class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span\
    \ class=\"token plain\"> </span><span class=\"token number\" style=\"color: rgb(247,\
    \ 140, 108);\">10</span><span class=\"token plain\"></span><br></span><span class=\"\
    token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\"\
    >    </span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\"\
    >}</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\"\
    >,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\"\
    \ style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">    </span><span\
    \ class=\"token property\">\"has_next\"</span><span class=\"token operator\" style=\"\
    color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span\
    \ class=\"token boolean\" style=\"color: rgb(255, 88, 116);\">true</span><span\
    \ class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span\
    \ class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"\
    color: rgb(191, 199, 213);\"><span class=\"token plain\">    </span><span class=\"\
    token property\">\"has_previous\"</span><span class=\"token operator\" style=\"\
    color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span\
    \ class=\"token boolean\" style=\"color: rgb(255, 88, 116);\">false</span><span\
    \ class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"\
    color: rgb(191, 199, 213);\"><span class=\"token plain\">  </span><span class=\"\
    token punctuation\" style=\"color: rgb(199, 146, 234);\">}</span><span class=\"\
    token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191,\
    \ 199, 213);\"><span class=\"token plain\"></span><span class=\"token punctuation\"\
    \ style=\"color: rgb(199, 146, 234);\">}</span><br></span></code></pre><div class=\"\
    buttonGroup_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"\
    ><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\"\
    \ class=\"clean-btn\"><span class=\"copyButtonIcons_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\"\
    \ aria-hidden=\"true\"><svg class=\"copyButtonIcon_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\"\
    \ viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0\
    \ 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"\
    ></path></svg><svg class=\"copyButtonSuccessIcon_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\"\
    \ viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"\
    ></path></svg></span></button></div></div></div><h2 class=\"anchor anchorWithStickyNavbar_node_modules-@docusaurus-theme-classic-lib-theme-Heading-styles-module\"\
    \ id=\"pagination---parameters\">Pagination - Parameters<a class=\"hash-link\"\
    \ href=\"#pagination---parameters\" title=\"Direct link to heading\">â€‹</a></h2><p>You\
    \ can add those values to manipulate the pagination object in the URL Parameters.</p><ul\
    \ class=\"\"><li>page</li><li>limit</li></ul><p>Example:</p><div class=\"language-text\
    \ codeBlockContainer_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Container-styles-module\
    \ theme-code-block\" style=\"--prism-color:#bfc7d5; --prism-background-color:#292d3e;\"\
    ><div class=\"codeBlockContent_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"\
    ><pre tabindex=\"0\" class=\"prism-code language-text codeBlock_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\
    \ thin-scrollbar\"><code class=\"codeBlockLines_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"\
    ><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"\
    token plain\"># To get the second page</span><br></span><span class=\"token-line\"\
    \ style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">GET - https://api.edgegap.com/v1/apps?page=2</span><br></span><span\
    \ class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token\
    \ plain\" style=\"display: inline-block;\"></span><br></span><span class=\"token-line\"\
    \ style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\"># To change\
    \ the count of element in one page (20/page)</span><br></span><span class=\"token-line\"\
    \ style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">GET - https://api.edgegap.com/v1/apps?limit=20</span><br></span><span\
    \ class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token\
    \ plain\" style=\"display: inline-block;\"></span><br></span><span class=\"token-line\"\
    \ style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\"># You can mix\
    \ those (20/page, second page)</span><br></span><span class=\"token-line\" style=\"\
    color: rgb(191, 199, 213);\"><span class=\"token plain\">GET - https://api.edgegap.com/v1/apps?page=2&amp;limit=20</span><br></span></code></pre><div\
    \ class=\"buttonGroup_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"\
    ><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\"\
    \ class=\"clean-btn\"><span class=\"copyButtonIcons_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\"\
    \ aria-hidden=\"true\"><svg class=\"copyButtonIcon_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\"\
    \ viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0\
    \ 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"\
    ></path></svg><svg class=\"copyButtonSuccessIcon_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\"\
    \ viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"\
    ></path></svg></span></button></div></div></div></div>"
  title: "Edgegap V1"
  termsOfService: "https://console.edgegap.com/terms-of-service"
  contact:
    name: "Email"
    url: "https://edgegap.com"
    email: "info@edgegap.com"
basePath: "/"
tags:
- name: "Deployments"
  description: "Deployments Control API - Please refer to <a href='https://docs.edgegap.com/docs/deployment'\
    \ target='_blank'>this documentation</a> to get started with deployments."
- name: "Applications"
  description: "Applications Control API - Please refer to <a href='https://docs.edgegap.com/docs/application'\
    \ target='_blank'>this documentation</a> to get started with applications."
- name: "Locations"
  description: "Locations API - Please refer to <a href='https://docs.edgegap.com/docs/deployment/locations/beacons'\
    \ target='_blank'>this documentation</a> to get started with locations beacons."
- name: "Sessions"
  description: "Sessions Control API - Please refer to <a href='https://docs.edgegap.com/docs/deployment/session'\
    \ target='_blank'>this documentation</a> to get started with sessions."
- name: "Metrics"
  description: "Metrics API - Please refer to <a href='https://docs.edgegap.com/docs/deployment/metrics'\
    \ target='_blank'>this documentation</a> to get started with your deployment metrics."
- name: "Custom Sessions"
  description: "Custom Sessions Control API - Please refer to <a href='https://docs.edgegap.com/docs/deployment/session/custom-sessions'\
    \ target='_blank'>this documentation</a> to get started with custom sessions."
- name: "Matchmaker"
  description: "Matchmaker Control API - Please refer to <a href='https://docs.edgegap.com/docs/matchmaker'\
    \ target='_blank'>this documentation</a> to get started with matchmakers."
- name: "Telemetry"
  description: "Active Deployment Telemetry API - Please refer to <a href='https://docs.edgegap.com/docs/deployment/active-deployment-telemetry'\
    \ target='_blank'>this documentation</a> to get started with active deployment\
    \ telemetry."
- name: "IP Lookup"
  description: "IP API - IP addresses related operations."
- name: "Fleets"
  description: "Fleets Control API - Please refer to <a href='https://docs.edgegap.com/docs/deployment/session/fleet-manager/fleet'\
    \ target='_blank'>this documentation</a> to get started with fleets."
- name: "Endpoint Storage"
  description: "Endpoint Storage Control API - Please refer to <a href='https://docs.edgegap.com/docs/deployment/endpoint-storage'\
    \ target='_blank'>this documentation</a> to get started with storage."
- name: "Relays"
  description: "Handles Relay Sessions operations. Those operations are similar to\
    \ Sessions but are simplified to be used with relays."
- name: "Lobbies"
  description: "Management of Arbitrium lobbies."
- name: "Deployment Tags"
  description: "Deployment Tags API - Deployment Tags related operations."
- name: "Context"
  description: "Context API - Context related operations. These routes are only accessible\
    \ from within a deployment. They need a special token to be accessed and the Application\
    \ Version that is deployed must have an injected context."
- name: "Monitoring"
  description: "Monitoring"
consumes:
- "application/json"
produces:
- "application/json"
security:
- apiKey: []
paths:
  /monitor:
    get:
      tags:
      - "Monitoring"
      description: "Monitor the API"
      operationId: "monitoring"
      parameters: []
      security: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Monitor"
  /v1/aom/component:
    post:
      tags:
      - "Matchmaker"
      summary: "Create a Matchmaker Component"
      description: "Create a new matchmaker component."
      operationId: "post-matchmaker-component"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/MatchmakerComponentCreate"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerComponentResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/aom/component/{component_name}:
    get:
      tags:
      - "Matchmaker"
      summary: "Get a Matchmaker Component"
      description: "Retrieve a matchmaker component."
      operationId: "get-matchmaker-component"
      parameters:
      - name: "component_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ComponentName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerComponentResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Matchmaker"
      summary: "Delete a Matchmaker Component"
      description: "Delete a matchmaker component. It will not delete the matchmaker."
      operationId: "delete-matchmaker-component"
      parameters:
      - name: "component_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ComponentName"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "Matchmaker"
      summary: "Update a Matchmaker Component"
      description: "Update a matchmaker component with new specifications."
      operationId: "patch-matchmaker-component"
      parameters:
      - name: "component_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ComponentName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/MatchmakerComponentUpdate"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerComponentResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/aom/component/{component_name}/env:
    post:
      tags:
      - "Matchmaker"
      summary: "Create a Matchmaker Component ENV"
      description: "Create a new matchmaker component ENV."
      operationId: "post-matchmaker-component-env"
      parameters:
      - name: "component_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ComponentName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/MatchmakerComponentEnvsCreate"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerComponentEnvsResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/aom/component/{component_name}/env/{env_key}:
    get:
      tags:
      - "Matchmaker"
      summary: "Get a Matchmaker Component ENV"
      description: "Retrieve a matchmaker component ENV."
      operationId: "get-matchmaker-component-env"
      parameters:
      - name: "component_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ComponentName"
      - name: "env_key"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "EnvKey"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerComponentEnvsResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Matchmaker"
      summary: "Delete a Matchmaker Component ENV"
      description: "Delete a matchmaker component ENV. It will not delete the component\
        \ or the matchmaker."
      operationId: "delete-matchmaker-component-env"
      parameters:
      - name: "component_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ComponentName"
      - name: "env_key"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "EnvKey"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "Matchmaker"
      summary: "Update a Matchmaker Component ENV"
      description: "Update a matchmaker component ENV."
      operationId: "patch-matchmaker-component-env"
      parameters:
      - name: "component_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ComponentName"
      - name: "env_key"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "EnvKey"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/MatchmakerComponentEnvsUpdate"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerComponentEnvsResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/aom/component/{component_name}/envs:
    get:
      tags:
      - "Matchmaker"
      summary: "List All Matchmaker Component ENVs"
      description: "List all ENVs for a specific matchmaker component."
      operationId: "get-envs-list"
      parameters:
      - name: "component_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ComponentName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerComponentEnvListResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/aom/components:
    get:
      tags:
      - "Matchmaker"
      summary: "List All Matchmaker Components"
      description: "List all components for a specific matchmaker."
      operationId: "get-component-list"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerComponentListResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/aom/matchmaker:
    post:
      tags:
      - "Matchmaker"
      summary: "Create a Matchmaker"
      description: "Create a new matchmaker. A matchmaker is a top-level object; you\
        \ must create child resources to work properly."
      operationId: "post-matchmaker"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/MatchmakerCreate"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/aom/matchmaker/{matchmaker_name}:
    get:
      tags:
      - "Matchmaker"
      summary: "Get a Matchmaker"
      description: "Retrieve a matchmaker."
      operationId: "get-matchmaker"
      parameters:
      - name: "matchmaker_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "MatchmakerName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Matchmaker"
      summary: "Delete a Matchmaker"
      description: "Delete a matchmaker."
      operationId: "delete-matchmaker"
      parameters:
      - name: "matchmaker_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "MatchmakerName"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "Matchmaker"
      summary: "Update a Matchmaker"
      description: "Update a matchmaker with new specifications."
      operationId: "patch-matchmaker"
      parameters:
      - name: "matchmaker_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "MatchmakerName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/MatchmakerUpdate"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/aom/matchmaker/{matchmaker_name}/release:
    post:
      tags:
      - "Matchmaker"
      summary: "Create a Matchmaker Release"
      description: "Create a matchmaker release."
      operationId: "post-matchmaker-release"
      parameters:
      - name: "matchmaker_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "MatchmakerName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/MatchmakerReleaseCreate"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerReleaseResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/aom/matchmaker/{matchmaker_name}/release/managed:
    post:
      tags:
      - "Matchmaker"
      summary: "Create a Matchmaker Managed Release"
      description: "Create a matchmaker managed release."
      operationId: "post-matchmaker-managed-release"
      parameters:
      - name: "matchmaker_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "MatchmakerName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/MatchmakerManagedReleaseCreate"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerManagedReleaseResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/aom/matchmaker/{matchmaker_name}/release/managed/{release_version}:
    get:
      tags:
      - "Matchmaker"
      summary: "Get a Matchmaker Managed Release"
      description: "Retrieve a matchmaker managed release."
      operationId: "get-matchmaker-managed-release"
      parameters:
      - name: "matchmaker_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "MatchmakerName"
      - name: "release_version"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ReleaseVersion"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerManagedReleaseResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Matchmaker"
      summary: "Delete a Matchmaker Managed Release"
      description: "Delete a matchmaker managed release. It will not delete the matchmaker."
      operationId: "delete-matchmaker-managed-release"
      parameters:
      - name: "matchmaker_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "MatchmakerName"
      - name: "release_version"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ReleaseVersion"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "Matchmaker"
      summary: "Update a Matchmaker Managed Release"
      description: "Update a matchmaker managed release."
      operationId: "patch-matchmaker-managed-release"
      parameters:
      - name: "matchmaker_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "MatchmakerName"
      - name: "release_version"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ReleaseVersion"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/MatchmakerManagedReleaseUpdate"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerManagedReleaseResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/aom/matchmaker/{matchmaker_name}/release/{release_version}:
    get:
      tags:
      - "Matchmaker"
      summary: "Get a Matchmaker Release"
      description: "Retrieve a matchmaker release."
      operationId: "get-matchmaker-release"
      parameters:
      - name: "matchmaker_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "MatchmakerName"
      - name: "release_version"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ReleaseVersion"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerReleaseResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Matchmaker"
      summary: "Delete a Matchmaker Release"
      description: "Delete a matchmaker release."
      operationId: "delete-matchmaker-release"
      parameters:
      - name: "matchmaker_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "MatchmakerName"
      - name: "release_version"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ReleaseVersion"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "Matchmaker"
      summary: "Update a Matchmaker Release"
      description: "Update a matchmaker release."
      operationId: "patch-matchmaker-release"
      parameters:
      - name: "matchmaker_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "MatchmakerName"
      - name: "release_version"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ReleaseVersion"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/MatchmakerReleaseUpdate"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerReleaseResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/aom/matchmaker/{matchmaker_name}/releases:
    get:
      tags:
      - "Matchmaker"
      summary: "List All Matchmaker Releases"
      description: "List all releases of a specific matchmaker."
      operationId: "get-release-list"
      parameters:
      - name: "matchmaker_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "MatchmakerName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerComponentEnvListResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/aom/matchmakers:
    get:
      tags:
      - "Matchmaker"
      summary: "List All Matchmakers"
      description: "List all matchmakers."
      operationId: "get-matchmaker-list"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerListResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/aom/release/config:
    post:
      tags:
      - "Matchmaker"
      summary: "Create a Matchmaker Release Config"
      description: "Create a matchmaker release config."
      operationId: "post-matchmaker-release-config"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/MatchmakerReleaseConfigCreate"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerReleaseConfigResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/aom/release/config/{config_name}:
    get:
      tags:
      - "Matchmaker"
      summary: "Get a Matchmaker Release Config"
      description: "Get a matchmaker release config."
      operationId: "get-matchmaker-release-config"
      parameters:
      - name: "config_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ConfigName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerReleaseConfigResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Matchmaker"
      summary: "Delete a Matchmaker Release Config"
      description: "Delete a matchmaker release config."
      operationId: "delete-matchmaker-release-config"
      parameters:
      - name: "config_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ConfigName"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "Matchmaker"
      summary: "Update a Matchmaker Release Config"
      description: "Update a matchmaker release config."
      operationId: "patch-matchmaker-release-config"
      parameters:
      - name: "config_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ConfigName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/MatchmakerReleaseConfigUpdate"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerReleaseConfigResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/aom/release/configs:
    get:
      tags:
      - "Matchmaker"
      summary: "List All Matchmaker Release Configs"
      description: "List all configs for a specific matchmaker release."
      operationId: "get-release-configs-list"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MatchmakerComponentEnvListResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/app:
    post:
      tags:
      - "Applications"
      summary: "Create a New Application"
      description: "Create an application that will regroup application versions."
      operationId: "application-post"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/ApplicationPost"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/app/{app_name}:
    get:
      tags:
      - "Applications"
      summary: "Get an Application"
      description: "Retrieve an application and its information."
      operationId: "application-get"
      parameters:
      - name: "app_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AppName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Applications"
      summary: "Delete an Application"
      description: "Delete an application and all its current versions."
      operationId: "application-delete"
      parameters:
      - name: "app_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AppName"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "Applications"
      summary: "Update an Application"
      description: "Update an application with new information."
      operationId: "application-patch"
      parameters:
      - name: "app_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AppName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/ApplicationPatch"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/app/{app_name}/version:
    post:
      tags:
      - "Applications"
      summary: "Create a New Application Version"
      description: "Create an application version associated with an application.\
        \ The version contains all the specifications to create a deployment."
      operationId: "app-version-post"
      parameters:
      - name: "app_name"
        in: "path"
        description: "The name of the application associated"
        required: true
        type: "string"
        x-exportParamName: "AppName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/AppVersionPayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppVersionCreateResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict"
          schema:
            $ref: "#/definitions/Error"
        "424":
          description: "Failed Dependency"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
  /v1/app/{app_name}/version/{version_name}:
    get:
      tags:
      - "Applications"
      summary: "Get an Application Version"
      description: "Retrieve the specifications of an application version."
      operationId: "app-version-get"
      parameters:
      - name: "app_name"
        in: "path"
        description: "The name of the application"
        required: true
        type: "string"
        x-exportParamName: "AppName"
      - name: "version_name"
        in: "path"
        description: "The name of the application version"
        required: true
        type: "string"
        x-exportParamName: "VersionName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppVersionPayload"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Applications"
      summary: "Delete an Application Version"
      description: "Delete a specific version of an application."
      operationId: "app-version-delete"
      parameters:
      - name: "app_name"
        in: "path"
        description: "The name of the application"
        required: true
        type: "string"
        x-exportParamName: "AppName"
      - name: "version_name"
        in: "path"
        description: "The name of the application version"
        required: true
        type: "string"
        x-exportParamName: "VersionName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppVersionDelete"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "Applications"
      summary: "Update an Application Version"
      description: "Update an application version with new specifications."
      operationId: "app-versions-patch"
      parameters:
      - name: "app_name"
        in: "path"
        description: "The name of the application"
        required: true
        type: "string"
        x-exportParamName: "AppName"
      - name: "version_name"
        in: "path"
        description: "The name of the application version"
        required: true
        type: "string"
        x-exportParamName: "VersionName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/AppVersionUpdatePayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppVersionUpdateResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        "424":
          description: "Failed Dependency"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
  /v1/app/{app_name}/version/{version_name}/whitelist:
    get:
      tags:
      - "Applications"
      summary: "List All ACL Entries for an Application Version"
      description: "List all the access control list entries for a specific application\
        \ version."
      operationId: "app-version-whitelist-get"
      parameters:
      - name: "app_name"
        in: "path"
        description: "The name of the application"
        required: true
        type: "string"
        x-exportParamName: "AppName"
      - name: "version_name"
        in: "path"
        description: "The name of the application version"
        required: true
        type: "string"
        x-exportParamName: "VersionName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppVersionWhitelistResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "Applications"
      summary: "Create an ACL Entry"
      description: "Create an access control list entry for an app version. This will\
        \ allow the specified CIDR to connect to the deployment. The option ```whitelisting_active```\
        \ must be activated in the application version."
      operationId: "app-version-whitelist-post"
      parameters:
      - name: "app_name"
        in: "path"
        description: "The name of the application"
        required: true
        type: "string"
        x-exportParamName: "AppName"
      - name: "version_name"
        in: "path"
        description: "The name of the application version"
        required: true
        type: "string"
        x-exportParamName: "VersionName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/AppVersionWhitelistEntryPayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppVersionWhitelistEntrySuccess"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/app/{app_name}/version/{version_name}/whitelist/{entry_id}:
    get:
      tags:
      - "Applications"
      summary: "Get an ACL Entry"
      description: "Retrieve a specific access control list entry for an application\
        \ version."
      operationId: "app-version-whitelist-entry-get"
      parameters:
      - name: "app_name"
        in: "path"
        description: "The name of the application"
        required: true
        type: "string"
        x-exportParamName: "AppName"
      - name: "version_name"
        in: "path"
        description: "The name of the application version"
        required: true
        type: "string"
        x-exportParamName: "VersionName"
      - name: "entry_id"
        in: "path"
        description: "The unique ID of the entry"
        required: true
        type: "string"
        x-exportParamName: "EntryId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppVersionWhitelistEntry"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Applications"
      summary: "Delete an ACL Entry"
      description: "Delete an access control list entry for a specific application\
        \ version"
      operationId: "app-version-whitelist-entry-delete"
      parameters:
      - name: "app_name"
        in: "path"
        description: "The name of the application"
        required: true
        type: "string"
        x-exportParamName: "AppName"
      - name: "version_name"
        in: "path"
        description: "The name of the application version"
        required: true
        type: "string"
        x-exportParamName: "VersionName"
      - name: "entry_id"
        in: "path"
        description: "The unique ID of the entry"
        required: true
        type: "string"
        x-exportParamName: "EntryId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppVersionWhitelistEntrySuccess"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/app/{app_name}/versions:
    get:
      tags:
      - "Applications"
      summary: "List All Versions for an Application"
      description: "List all versions of a specific application."
      operationId: "app-versions-get"
      parameters:
      - name: "app_name"
        in: "path"
        description: "The name of the application"
        required: true
        type: "string"
        x-exportParamName: "AppName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppVersionList"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /v1/apps:
    get:
      tags:
      - "Applications"
      summary: "List All Applications"
      description: "List all the applications that you own."
      operationId: "applications-get"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Applications"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/context/{request_id}/{security_number}:
    get:
      tags:
      - "Context"
      summary: "Get the Context of a Deployment"
      description: "Retrieve contextual information about your live deployment. You\
        \ should use this URL inside your deployment container. The URL is injected\
        \ in your deployment and accessible via the environment variable ARBITRIUM_CONTEXT_URL."
      operationId: "context-get"
      parameters:
      - name: "request_id"
        in: "path"
        description: "Unique Identifier to keep track of your request across all Arbitrium\
          \ ecosystem. "
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      - name: "security_number"
        in: "path"
        description: "Random Security number generate to validate the request id."
        required: true
        type: "integer"
        x-exportParamName: "SecurityNumber"
      - name: "authorization"
        in: "header"
        description: "Auto Generated token. This token is injected in your deployment\
          \ and can be found via the environment variable named ARBITRIUM_CONTEXT_TOKEN "
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      security: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Deployment"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/context/{request_id}/{security_number}/tags:
    post:
      tags:
      - "Context"
      summary: "Create a Tag for a Running Deployment"
      description: "Create a tag for a running deployment. You should use this URL\
        \ inside your deployment container. The URL is injected in your deployment\
        \ and accessible via the environment variable ARBITRIUM_CONTEXT_URL and you\
        \ need to append \"/tags\" at the end of this URL."
      operationId: "context-create-deployment-tag"
      parameters:
      - name: "request_id"
        in: "path"
        description: "Unique Identifier to keep track of your request across all Arbitrium\
          \ ecosystem. "
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      - name: "security_number"
        in: "path"
        description: "Random Security number generate to validate the request id."
        required: true
        type: "integer"
        x-exportParamName: "SecurityNumber"
      - name: "authorization"
        in: "header"
        description: "Auto Generated token. This token is injected in your deployment\
          \ and can be found via the environment variable named ARBITRIUM_CONTEXT_TOKEN "
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/payload"
        x-exportParamName: "Payload"
      security: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ContextDeploymentTagResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict"
          schema:
            $ref: "#/definitions/Error"
  /v1/context/{request_id}/{security_number}/tags/{tag_name}:
    delete:
      tags:
      - "Context"
      summary: "Delete a Tag from a Running Deployment"
      description: "Delete a tag from a running deployment. You should use this URL\
        \ inside your deployment container. The URL is injected in your deployment\
        \ and accessible via the environment variable ARBITRIUM_CONTEXT_URL and you\
        \ need to append \"/tags/{tag_name}\" at the end of this URL."
      operationId: "context-delete-deployment-tag"
      parameters:
      - name: "tag_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TagName"
      - name: "request_id"
        in: "path"
        description: "Unique Identifier to keep track of your request across all Arbitrium\
          \ ecosystem. "
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      - name: "security_number"
        in: "path"
        description: "Random Security number generate to validate the request id."
        required: true
        type: "integer"
        x-exportParamName: "SecurityNumber"
      - name: "authorization"
        in: "header"
        description: "Auto Generated token. This token is injected in your deployment\
          \ and can be found via the environment variable named ARBITRIUM_CONTEXT_TOKEN "
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      security: []
      responses:
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /v1/deploy:
    post:
      tags:
      - "Deployments"
      summary: "Create a Deployment"
      description: "Create a new deployment. Deployment is a server instance of your\
        \ application version."
      operationId: "deploy"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/DeployModel"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Request"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict"
          schema:
            $ref: "#/definitions/Error"
        "422":
          description: "Unprocessable Entity"
          schema:
            $ref: "#/definitions/Error"
  /v1/deployment/{request_id}/container-logs:
    get:
      tags:
      - "Deployments"
      summary: "Get Deployment Container Logs"
      description: "Retrieve the logs of your container. Logs are not available when\
        \ your deployment is terminated. You can set up an endpoint storage to save\
        \ your logs. <a target='_blank' href='https://docs.edgegap.com/docs/deployment/endpoint-storage'>Endpoint\
        \ Storage Documentation</a>"
      operationId: "deployment-get-logs"
      parameters:
      - name: "request_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/api-model-containerlogs"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/deployment/{request_id}/custom/session/{custom_id}:
    get:
      tags:
      - "Custom Sessions"
      summary: "Get a Custom Session"
      description: "Retrieve the information of a custom session."
      operationId: "get-custom-session"
      parameters:
      - name: "custom_id"
        in: "path"
        description: "Custom ID Managed by you"
        required: true
        type: "string"
        x-exportParamName: "CustomId"
      - name: "request_id"
        in: "path"
        description: "Deployment Request ID"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SessionGet"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "Custom Sessions"
      summary: "Create a New Custom Session"
      description: "Create a custom session with users. You must specify a custom\
        \ ID and a deployment request ID."
      operationId: "post-custom-session"
      parameters:
      - name: "custom_id"
        in: "path"
        description: "Custom ID Managed by you"
        required: true
        type: "string"
        x-exportParamName: "CustomId"
      - name: "request_id"
        in: "path"
        description: "Deployment Request ID"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/CustomSessionModel"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SessionRequest"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Custom Sessions"
      summary: "Delete a Custom Session"
      description: "Delete a custom session. Once deleted, a custom session is no\
        \ more accessible and does not have a history. The deployment associated will\
        \ not be deleted."
      operationId: "delete-custom-session"
      parameters:
      - name: "custom_id"
        in: "path"
        description: "Custom ID Managed by you"
        required: true
        type: "string"
        x-exportParamName: "CustomId"
      - name: "request_id"
        in: "path"
        description: "Deployment Request ID"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SessionDelete"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "Custom Sessions"
      summary: "Update a Custom Session"
      description: "Update a custom session with new specifications."
      operationId: "patch-custom-session"
      parameters:
      - name: "custom_id"
        in: "path"
        description: "Custom ID Managed by you"
        required: true
        type: "string"
        x-exportParamName: "CustomId"
      - name: "request_id"
        in: "path"
        description: "Deployment Request ID"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/CustomSessionModel"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SessionGet"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/deployment/{request_id}/custom/sessions:
    get:
      tags:
      - "Custom Sessions"
      summary: "List All Custom Session of a Deployment"
      description: "List all custom sessions of a deployment."
      operationId: "get-custom-sessions"
      parameters:
      - name: "request_id"
        in: "path"
        description: "Deployment Request ID"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Sessions"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "Custom Sessions"
      summary: "Create Custom Sessions in Bulk"
      description: "Create multiple custom sessions in a deployment. You must specify\
        \ a custom ID for each."
      operationId: "post-custom-sessions"
      parameters:
      - name: "request_id"
        in: "path"
        description: "Deployment Request ID"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/CustomBulkSessionsModel"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/BulkSessionPost"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Custom Sessions"
      summary: "Delete Custom Sessions in Bulk"
      description: "Delete multiple custom sessions from a specific deployment."
      operationId: "delete-custom-sessions"
      parameters:
      - name: "request_id"
        in: "path"
        description: "Deployment Request ID"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/CustomSessionDeleteModel"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/BulkSessionDelete"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/deployments:
    get:
      tags:
      - "Deployments"
      summary: "List All Deployments"
      description: "List all deployments."
      operationId: "deployments-get"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Deployments"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/deployments/bulk-stop:
    post:
      tags:
      - "Deployments"
      summary: "Delete Deployments in Bulk"
      description: "Make a bulk delete of deployments using filters. All the deployments\
        \ matching the given filters will be permanently deleted."
      operationId: "deployments-bulk-delete"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/DeploymentBulkStopPayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DeploymentBulkStopResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
  /v1/deployments/{request_id}:
    patch:
      tags:
      - "Deployments"
      summary: "Updates properties of a deployment"
      description: "Updates properties of a deployment. Currently only the `is_joinable_by_session`\
        \ property can be updated."
      operationId: "deployment-update"
      parameters:
      - name: "request_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/DeploymentUpdatePayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DeploymentUpdateResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /v1/deployments/{request_id}/tags:
    get:
      tags:
      - "Deployment Tags"
      summary: "List tags for a Deployment"
      description: "List tags for a deployment."
      operationId: "deployments-tags-list"
      parameters:
      - name: "request_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DeploymentTagListResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "Deployment Tags"
      summary: "Create Tag for a Deployment"
      description: "Create a tag for a deployment. The tag will however not be injected\
        \ into a running container."
      operationId: "deployments-tags-create"
      parameters:
      - name: "request_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/DeploymentTagPayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DeploymentTagResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
  /v1/deployments/{request_id}/tags/{tag_name}:
    get:
      tags:
      - "Deployment Tags"
      summary: "Get tag for a Deployment"
      description: "Get tag for a deployment."
      operationId: "deployments-tags-read"
      parameters:
      - name: "request_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      - name: "tag_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TagName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DeploymentTagResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Deployment Tags"
      summary: "Delete Tag for a Deployment"
      description: "Delete a tag for a deployment. The tag will however not be removed\
        \ from the environment of a running container."
      operationId: "deployments-tags-delete"
      parameters:
      - name: "request_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      - name: "tag_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TagName"
      responses:
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "Deployment Tags"
      summary: "Update Tag for a Deployment"
      description: "Update a tag for a deployment."
      operationId: "deployments-tags-update"
      parameters:
      - name: "request_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      - name: "tag_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TagName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/DeploymentTagPayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DeploymentTagResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
  /v1/fleet:
    post:
      tags:
      - "Fleets"
      summary: "Create a Fleet"
      description: "Create a fleet. A fleet is a top-level object; you must create\
        \ child resources to work properly."
      operationId: "fleet-create"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/FleetPostPayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/FleetPostResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/fleet/{fleet_name}:
    get:
      tags:
      - "Fleets"
      summary: "Get a Fleet"
      description: "Retrieve a fleet with its details."
      operationId: "fleet-get"
      parameters:
      - name: "fleet_name"
        in: "path"
        description: "The name of the fleet"
        required: true
        type: "string"
        x-exportParamName: "FleetName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/FleetGetResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Fleets"
      summary: "Delete a Fleet"
      description: "Delete a fleet, its policies and links between the application\
        \ versions."
      operationId: "fleet-delete"
      parameters:
      - name: "fleet_name"
        in: "path"
        description: "The name of the fleet"
        required: true
        type: "string"
        x-exportParamName: "FleetName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/FleetDeleteResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "InternalServerError"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "Fleets"
      summary: "Update a Fleet"
      description: "Update a fleet with new specifications."
      operationId: "fleet-update"
      parameters:
      - name: "fleet_name"
        in: "path"
        description: "The name of the fleet"
        required: true
        type: "string"
        x-exportParamName: "FleetName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/FleetPatchPayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/FleetPatchResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /v1/fleet/{fleet_name}/app/{app_name}/version/{version_name}:
    put:
      tags:
      - "Fleets"
      summary: "Link an Application Version to a Fleet"
      description: "Link an application version to a fleet. By linking this version,\
        \ the fleet will automatically create deployments of this version according\
        \ to the fleet policies."
      operationId: "fleet-link-app-version"
      parameters:
      - name: "fleet_name"
        in: "path"
        description: "The name of the fleet"
        required: true
        type: "string"
        x-exportParamName: "FleetName"
      - name: "app_name"
        in: "path"
        description: "The name of the application to link"
        required: true
        type: "string"
        x-exportParamName: "AppName"
      - name: "version_name"
        in: "path"
        description: "The name of the application version to link"
        required: true
        type: "string"
        x-exportParamName: "VersionName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/HorizontalScalerAppVersionLink"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Fleets"
      summary: "Unlink an Application Version From a Fleet"
      description: "Unlink an application version from a fleet. It will not delete\
        \ the application version or the fleet"
      operationId: "fleet-unlink-app-version"
      parameters:
      - name: "fleet_name"
        in: "path"
        description: "The name of the fleet"
        required: true
        type: "string"
        x-exportParamName: "FleetName"
      - name: "app_name"
        in: "path"
        description: "The name of the application to link"
        required: true
        type: "string"
        x-exportParamName: "AppName"
      - name: "version_name"
        in: "path"
        description: "The name of the application version to link"
        required: true
        type: "string"
        x-exportParamName: "VersionName"
      responses:
        "204":
          description: "Success"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /v1/fleet/{fleet_name}/policies:
    get:
      tags:
      - "Fleets"
      summary: "List All Policies of a Fleet"
      description: "List all the policies of a fleet."
      operationId: "fleet-policies-list"
      parameters:
      - name: "fleet_name"
        in: "path"
        description: "The name of the fleet"
        required: true
        type: "string"
        x-exportParamName: "FleetName"
      - name: "page"
        in: "query"
        description: "Page number for pagination"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "Limit of Fleet for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/HorizontalScalerConstraintList"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "Fleets"
      summary: "Create a Fleet Policy"
      description: "Create a fleet policy. Policies are conditions that the fleet\
        \ must respect."
      operationId: "fleet-policies-create"
      parameters:
      - name: "fleet_name"
        in: "path"
        description: "The name of the fleet"
        required: true
        type: "string"
        x-exportParamName: "FleetName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/FleetPoliciesPostPayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/FleetPoliciesPostResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /v1/fleet/{fleet_name}/policies/{policy_name}:
    get:
      tags:
      - "Fleets"
      summary: "Get a Policy"
      description: "Retrieve a specific policy of a fleet."
      operationId: "fleet-policies-get"
      parameters:
      - name: "fleet_name"
        in: "path"
        description: "The name of the fleet"
        required: true
        type: "string"
        x-exportParamName: "FleetName"
      - name: "policy_name"
        in: "path"
        description: "The name of the policy"
        required: true
        type: "string"
        x-exportParamName: "PolicyName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/FleetPoliciesGetResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Fleets"
      summary: "Delete a Policy"
      description: "Delete a policy. It will not delete the fleet."
      operationId: "fleet-policies-delete"
      parameters:
      - name: "fleet_name"
        in: "path"
        description: "The name of the fleet"
        required: true
        type: "string"
        x-exportParamName: "FleetName"
      - name: "policy_name"
        in: "path"
        description: "The name of the policy to delete"
        required: true
        type: "string"
        x-exportParamName: "PolicyName"
      responses:
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "Fleets"
      summary: "Update a Policy"
      description: "Update a policy with new specifications."
      operationId: "fleet-policies-update"
      parameters:
      - name: "fleet_name"
        in: "path"
        description: "The name of the fleet"
        required: true
        type: "string"
        x-exportParamName: "FleetName"
      - name: "policy_name"
        in: "path"
        description: "The name of the policy"
        required: true
        type: "string"
        x-exportParamName: "PolicyName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/FleetPoliciesPatchPayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/FleetPoliciesPatchPayload"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /v1/fleets:
    get:
      tags:
      - "Fleets"
      summary: "List All Fleets"
      description: "List all the fleets you own."
      operationId: "fleets"
      parameters:
      - name: "page"
        in: "query"
        description: "Page number for pagination"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "Limit of Fleet for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/FleetList"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/ip:
    get:
      tags:
      - "IP Lookup"
      summary: "Get Your Public IP"
      description: "Retrieve your public IP address."
      operationId: "IP"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/IPAddressResponse"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/ip/{ip}/lookup:
    get:
      tags:
      - "IP Lookup"
      summary: "Get an IP's information"
      description: "Lookup an IP address and return the associated information."
      operationId: "IP lookup"
      parameters:
      - name: "ip"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Ip"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/IPAddressLookupResponse"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "InternalServerError"
          schema:
            $ref: "#/definitions/Error"
  /v1/ips/lookup:
    post:
      tags:
      - "IP Lookup"
      summary: "Get IPs Information in Bulk"
      description: "Lookup IP addresses and return the associated information. Maximum\
        \ of 20 IPs."
      operationId: "IPs lookup"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/IPAddressesLookupPayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/IPAddressesLookupResponse"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "InternalServerError"
          schema:
            $ref: "#/definitions/Error"
  /v1/lobbies:
    post:
      tags:
      - "Lobbies"
      summary: "Create a Lobby"
      description: "Create a named lobby."
      operationId: "lobby-create"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/LobbyCreatePayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/LobbyReadResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
  /v1/lobbies/{lobby_name}:
    get:
      tags:
      - "Lobbies"
      summary: "Get a Lobby"
      description: "Get a named lobby."
      operationId: "lobby-Get"
      parameters:
      - name: "lobby_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LobbyName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/LobbyReadResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
  /v1/lobbies:deploy:
    post:
      tags:
      - "Lobbies"
      summary: "Deploy a Lobby"
      description: "Deploy the lobby with the given name."
      operationId: "lobby-deploy"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/LobbyDeployPayload"
        x-exportParamName: "Payload"
      responses:
        "202":
          description: "Success"
          schema:
            $ref: "#/definitions/LobbyReadResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
  /v1/lobbies:terminate:
    post:
      tags:
      - "Lobbies"
      summary: "Terminate a Lobby"
      description: "Terminate the lobby with the given name."
      operationId: "lobby-terminate"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/LobbyTerminatePayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/LobbyReadResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
  /v1/locations:
    get:
      tags:
      - "Locations"
      summary: "List All Locations"
      description: "List all the locations available to deploy on. You can specify\
        \ an application and a version to filter out the locations that donâ€™t have\
        \ enough resources to deploy this application version."
      operationId: "locations-get"
      parameters:
      - name: "app"
        in: "query"
        description: "The App Name you want to filter with capacity"
        required: false
        type: "string"
        x-exportParamName: "App"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "The Version Name you want to filter with capacity"
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      - name: "type"
        in: "query"
        description: "The type of the location"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "tags"
        in: "query"
        description: "Gets locations with tags. Set to: \"true\" to have the tags"
        required: false
        type: "string"
        x-exportParamName: "Tags"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Locations"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/locations/beacons:
    get:
      tags:
      - "Locations"
      summary: "List All Location Beacons"
      description: "List all the active location beacons. They can be used to ping\
        \ them for your matchmaking system. You cannot deploy on beacons."
      operationId: "location-beacon-list"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/LocationBeaconList"
  /v1/metrics/deployment/{request_id}:
    get:
      tags:
      - "Metrics"
      summary: "Get a Deployment Metrics"
      description: "Get the metrics for a specific deployment based on the ```start_time```,\
        \ ```end_time``` and ```steps```. ```raw``` parameter can be set to true to\
        \ get the raw data."
      operationId: "deployment-metrics-get"
      parameters:
      - name: "request_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      - name: "start_time"
        in: "query"
        description: "Starting time for the query. Default to deployment start time.\
          \ Should match %Y-%m-%d %H:%M:%S\n\n\t\tExample: 2021-07-10 00:00:00"
        required: false
        type: "string"
        x-exportParamName: "StartTime"
        x-optionalDataType: "String"
      - name: "end_time"
        in: "query"
        description: "End time for the metrics. Default to now.Must be greater than\
          \ start_time. Should match %Y-%m-%d %H:%M:%S\n\n\t\tExample: 2021-07-19\
          \ 00:00:00"
        required: false
        type: "string"
        x-exportParamName: "EndTime"
        x-optionalDataType: "String"
      - name: "steps"
        in: "query"
        description: "Steps between each metrics.\n\n\t\tExample: 30s, 1m, 5m 10m,\
          \ 1h "
        required: false
        type: "string"
        x-exportParamName: "Steps"
        x-optionalDataType: "String"
      - name: "raw"
        in: "query"
        description: "If set to true, will return the raw data. Default to false."
        required: false
        type: "string"
        x-exportParamName: "Raw"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/MetricsResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "422":
          description: "Unprocessable Entity"
          schema:
            $ref: "#/definitions/Error"
  /v1/relays/sessions:
    get:
      tags:
      - "Relays"
      summary: "List all Relay Sessions"
      description: "List all the active relay sessions."
      operationId: "relay-session-list"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RelaySessionListResponse"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "Relays"
      summary: "Create a Relay Session"
      description: "Create a relay session with users."
      operationId: "relay-session-create"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/RelaySessionCreatePayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RelaySessionBaseResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        "503":
          description: "Service Unavailable"
          schema:
            $ref: "#/definitions/Error"
  /v1/relays/sessions/{session_id}:
    get:
      tags:
      - "Relays"
      summary: "Get a Relay Session"
      description: "Retrieve the information for a relay session."
      operationId: "relay-session-get"
      parameters:
      - name: "session_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SessionId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RelaySessionBaseResponse"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Relays"
      summary: "Delete a Relay Session"
      description: "Delete a relay session."
      operationId: "relay-session-delete"
      parameters:
      - name: "session_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SessionId"
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /v1/relays/sessions:authorize-user:
    post:
      tags:
      - "Relays"
      summary: "Authorize a user on a Relay Session"
      description: "Authorize a user on a Relay Session"
      operationId: "relay-user-authorize"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/RelayUserAuthorizePayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RelaySessionUserBaseResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        "503":
          description: "Service Unavailable"
          schema:
            $ref: "#/definitions/Error"
  /v1/relays/sessions:revoke-user:
    post:
      tags:
      - "Relays"
      summary: "Remove a user on a Relay Session"
      description: "Authorize a user on a Relay Session"
      operationId: "relay-user-revoke"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/RelayUserRevokePayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RelaySessionBaseResponse"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
        "503":
          description: "Service Unavailable"
          schema:
            $ref: "#/definitions/Error"
  /v1/self/stop/{request_id}/{access_point_id}:
    delete:
      tags:
      - "Deployments"
      summary: "Delete a Deployment from inside the container"
      description: "Delete a deployment from the inside of a container. You should\
        \ use this URL inside your deployment. The URL is injected in your deployment\
        \ and can be found via the environment variable ARBITRIUM_DELETE_URL."
      operationId: "self-deployment-delete"
      parameters:
      - name: "request_id"
        in: "path"
        description: "Unique Identifier to keep track of your request across all Arbitrium\
          \ ecosystem. It's included in the response of the app deploy, example: \n\
          \n\t93924761ccde"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      - name: "access_point_id"
        in: "path"
        description: "Access Point Number provided by our system"
        required: true
        type: "integer"
        x-exportParamName: "AccessPointId"
      - name: "authorization"
        in: "header"
        description: "Auto Generated token. This token is injected in your deployment\
          \ and can be found via the environment variable named ARBITRIUM_DELETE_TOKEN"
        required: true
        type: "string"
        x-exportParamName: "Authorization"
      - name: "container_log_storage"
        in: "query"
        description: "If you want to enable the container log storage for the deployment.\
          \ You can put 'true' if you already have endpoint storage associated with\
          \ your deployment's app version. You can put 'false' if it is enabled by\
          \ default and you want to disable it for this specific request. Or you can\
          \ put the name of your endpoint storage and if it is valid we will store\
          \ the container logs."
        required: false
        type: "string"
        x-exportParamName: "ContainerLogStorage"
        x-optionalDataType: "String"
      security: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Delete"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DeleteRequestReceived"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "410":
          description: "Instance Already terminated"
          schema:
            $ref: "#/definitions/Error"
  /v1/session:
    post:
      tags:
      - "Sessions"
      summary: "Create a Session"
      description: "Create a session with users. Sessions are linked to a deployment."
      operationId: "session-post"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/SessionModel"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SessionRequest"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict"
          schema:
            $ref: "#/definitions/Error"
  /v1/session/{session_id}:
    get:
      tags:
      - "Sessions"
      summary: "Get a Session"
      description: "Retrieve the information for a session."
      operationId: "get-session"
      parameters:
      - name: "session_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SessionId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SessionGet"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Sessions"
      summary: "Delete a Session"
      description: "Delete a session. Once deleted, a session is no more accessible\
        \ and does not have a history. The deployment associated will not be deleted."
      operationId: "session-delete"
      parameters:
      - name: "session_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SessionId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SessionDelete"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        "410":
          description: "Instance Already terminated"
          schema:
            $ref: "#/definitions/Error"
  /v1/session/{session_id}/users:
    get:
      tags:
      - "Sessions"
      summary: "List Users of a Session"
      description: "List all the users of session."
      operationId: "get-users-session"
      parameters:
      - name: "session_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SessionId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SessionUserContext"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "Sessions"
      summary: "Put Users in a Session"
      description: "Add specified users to a session."
      operationId: "put-users-session"
      parameters:
      - name: "session_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SessionId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/PatchSessionModel"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SessionUserContext"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "422":
          description: "Unprocessable Entity"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Sessions"
      summary: "Delete Users From a Session"
      description: "Remove specified users from a session."
      operationId: "delete-users-session"
      parameters:
      - name: "session_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SessionId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/PatchSessionModel"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SessionUserContext"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/sessions:
    get:
      tags:
      - "Sessions"
      summary: "List All Sessions"
      description: "List all the active sessions."
      operationId: "list-sessions"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Sessions"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/sessions/bulk-stop:
    post:
      tags:
      - "Sessions"
      summary: "Delete Sessions in Bulk"
      description: "Make a bulk delete of sessions using filters. All the sessions\
        \ matching the given filters will be permanently deleted."
      operationId: "sessions-bulk-stop"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/SessionBulkStopPayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SessionBulkStopResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
  /v1/status/{request_id}:
    get:
      tags:
      - "Deployments"
      summary: "Get a Deployment Status and Information"
      description: "Retrieve the information for a deployment."
      operationId: "deployment-status-get"
      parameters:
      - name: "request_id"
        in: "path"
        description: "Unique Identifier to keep track of your request across all Arbitrium\
          \ ecosystem. It's included in the response of the app deploy, example: \n\
          \n\t93924761ccde"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Status"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/stop/{request_id}:
    delete:
      tags:
      - "Deployments"
      summary: "Delete a Deployment"
      description: "Delete an instance of deployment. It will stop the running container\
        \ and all its games."
      operationId: "deployment-delete"
      parameters:
      - name: "request_id"
        in: "path"
        description: "Unique Identifier to keep track of your request across all Arbitrium\
          \ ecosystem. It's included in the response of the app deploy, example: \n\
          \n\t93924761ccde"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      - name: "container_log_storage"
        in: "query"
        description: "If you want to enable the container log storage for the deployment.\
          \ You can put 'true' if you already have endpoint storage associated with\
          \ your deployment's app version. You can put 'false' if it is enabled by\
          \ default and you want to disable it for this specific request. Or you can\
          \ put the name of your endpoint storage and if it is valid we will store\
          \ the container logs."
        required: false
        type: "string"
        x-exportParamName: "ContainerLogStorage"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Delete"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DeleteRequestReceived"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "410":
          description: "Instance Already terminated"
          schema:
            $ref: "#/definitions/Error"
  /v1/storage/endpoint:
    post:
      tags:
      - "Endpoint Storage"
      summary: "Create a New Endpoint Storage"
      description: "Create an endpoint storage to store your container logs at the\
        \ end of a deployment."
      operationId: "endpoint-create"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/EndpointStoragePostPayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EndpointStoragePostResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/storage/endpoint/{endpoint_name}:
    get:
      tags:
      - "Endpoint Storage"
      summary: "Get an Endpoint Storage"
      description: "Retrieve an endpoint storage. The ```secret_access_key``` won't\
        \ be displayed."
      operationId: "endpoint-get"
      parameters:
      - name: "endpoint_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "EndpointName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EndpointStorageGetResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Endpoint Storage"
      summary: "Delete an Endpoint Storage"
      description: "Delete an endpoint storage. All the application versions linked\
        \ to it won't be able to store logs anymore."
      operationId: "endpoint-delete"
      parameters:
      - name: "endpoint_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "EndpointName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EndpointStorageDeleteResponse"
        "204":
          description: "Success"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "Endpoint Storage"
      summary: "Update an Endpoint Storage"
      description: "Update an Endpoint Storage with new specifications."
      operationId: "endpoint-update"
      parameters:
      - name: "endpoint_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "EndpointName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/EndpointStoragePatchPayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EndpointStoragePatchResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /v1/storage/endpoint/{endpoint_name}/pull-profile:
    post:
      tags:
      - "Endpoint Storage"
      summary: "Create a New Pull Profile"
      description: "Create a pull profile. Pull profile will upload data from an endpoint\
        \ storage to a deployment container on boot. You must link the application\
        \ version to the pull profile first."
      operationId: "pull-profile-create"
      parameters:
      - name: "endpoint_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "EndpointName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/PullProfilePostPayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/PullProfilePostResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/storage/endpoint/{endpoint_name}/pull-profile/{pull_profile_name}:
    get:
      tags:
      - "Endpoint Storage"
      summary: "Get a Pull Profile"
      description: "Retrieve a pull profile and its specifications."
      operationId: "pull-profile-get"
      parameters:
      - name: "endpoint_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "EndpointName"
      - name: "pull_profile_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PullProfileName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/PullProfileGetResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Endpoint Storage"
      summary: "Delete a Pull Profile"
      description: "Delete a pull profile. All the application versions linked won't\
        \ receive the data upload anymore. It will not delete your endpoint storage."
      operationId: "pull-profile-delete"
      parameters:
      - name: "endpoint_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "EndpointName"
      - name: "pull_profile_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PullProfileName"
      responses:
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "Endpoint Storage"
      summary: "Update a Pull Profile"
      description: "Update a pull profile with new specifications."
      operationId: "pull-profile-update"
      parameters:
      - name: "endpoint_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "EndpointName"
      - name: "pull_profile_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PullProfileName"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/PullProfilePatchPayload"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/PulloProfilePatchResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /v1/storage/endpoint/{endpoint_name}/pull-profile/{pull_profile_name}/app/{app_name}/version/{version_name}:
    put:
      tags:
      - "Endpoint Storage"
      summary: "Link a Pull Profile to an Application Version"
      description: "Link a pull profile to an app version. Without a link, the pull\
        \ profile by itself will do nothing."
      operationId: "pull-profile-link-app-version"
      parameters:
      - name: "endpoint_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "EndpointName"
      - name: "pull_profile_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PullProfileName"
      - name: "app_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AppName"
      - name: "version_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionName"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/PullProfileAppVersionLinkResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Endpoint Storage"
      summary: "Unlink a Pull Profile From an Application Version"
      description: "Unlink a pull profile from an app version. It will not delete\
        \ the pull profile."
      operationId: "pull-profile-unlink-app-version"
      parameters:
      - name: "endpoint_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "EndpointName"
      - name: "pull_profile_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PullProfileName"
      - name: "app_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AppName"
      - name: "version_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionName"
      responses:
        "204":
          description: "Success"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /v1/storage/endpoint/{endpoint_name}/pull-profiles:
    get:
      tags:
      - "Endpoint Storage"
      summary: "List All Pull Profile of an Endpoint Storage"
      description: "List all pull profiles of an endpoint storage."
      operationId: "pull-profile-list"
      parameters:
      - name: "endpoint_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "EndpointName"
      - name: "page"
        in: "query"
        description: "Page number for pagination"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "Limit of pull profiles for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/PullProfilesListResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /v1/storage/endpoints:
    get:
      tags:
      - "Endpoint Storage"
      summary: "List All Endpoint Storage"
      description: "List all endpoint storage."
      operationId: "endpoints-list"
      parameters:
      - name: "page"
        in: "query"
        description: "Page number for pagination"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "Limit of Fleet for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "X-Fields"
        in: "header"
        description: "An optional fields mask"
        required: false
        type: "string"
        format: "mask"
        x-exportParamName: "XFields"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EndpointStorageListResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
  /v1/telemetry/active-deployments:
    post:
      tags:
      - "Telemetry"
      summary: "Create a New Active Deployment Telemetry Request"
      description: "Create a telemetry request to get the best deployment(s) for given\
        \ IP(s). You can use this to add players on a running deployment. If you set\
        \ a webhook URL, the result will be sent to it."
      operationId: "active-deployment-telemetry-post"
      parameters:
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/ActiveDeploymentTelemetryRequest"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ActiveDeploymentTelemetryResponse"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "422":
          description: "Unprocessable Entity"
          schema:
            $ref: "#/definitions/Error"
  /v1/telemetry/active-deployments/{retrieval_key}:
    get:
      tags:
      - "Telemetry"
      summary: "Get the Result of an Active Deployment Telemetry Request"
      description: "Retrieve the results of a telemetry request on active deployment(s)\
        \ for given IP(s). The score array is sorted from the best to the worse deployment.\
        \ You can use this to add players on a running deployment."
      operationId: "active-deployment-telemetry-get"
      parameters:
      - name: "retrieval_key"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RetrievalKey"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ActiveDeploymentTelemetryGetResult"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
securityDefinitions:
  apiKey:
    description: "<p>The Edgegap API uses API keys for authentication. You can create\
      \ one via the <a href='https://console.edgegap.com' target='_blank'>Dashboard.</a>\
      \ You must keep your API token secure and not publicly share it. You can disable\
      \ or delete a token on the dashboard.</p>\n\n<p>Example: <code>{ \"authorization\"\
      : \"token YOUR_API_TOKEN\" }</code></p>"
    type: "apiKey"
    name: "authorization"
    in: "header"
definitions:
  DeploymentUpdatePayload:
    type: "object"
    properties:
      is_joinable_by_session:
        type: "boolean"
        description: "Whether a session can connect to this deployment or not."
    example:
      is_joinable_by_session: true
    additionalProperties: false
  DeploymentUpdateResponse:
    type: "object"
    required:
    - "is_joinable_by_session"
    properties:
      is_joinable_by_session:
        type: "boolean"
        description: "If the deployment is joinable by sessions"
    example:
      is_joinable_by_session: true
  Error:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        description: "A message depending of the request termination"
  DeploymentBulkStopPayload:
    type: "object"
    required:
    - "filters"
    properties:
      filters:
        type: "array"
        description: "Filters used to match with deployments"
        items:
          $ref: "#/definitions/DeploymentBulkStopFiltersPayload"
    example:
      filters:
      - field: "request_id"
        filter_type: "any"
        values:
        - "values"
        - "values"
      - field: "request_id"
        filter_type: "any"
        values:
        - "values"
        - "values"
  DeploymentBulkStopFiltersPayload:
    type: "object"
    required:
    - "field"
    - "filter_type"
    - "values"
    properties:
      field:
        type: "string"
        example: "request_id"
        description: "The field on which to apply the filter"
        enum:
        - "request_id"
        - "deployment_tags"
      values:
        type: "array"
        description: "Values that will be used for the filter"
        items:
          type: "string"
      filter_type:
        type: "string"
        example: "any"
        description: "Types of filter used. Possible values are: ['any', 'all', 'not']"
        enum:
        - "any"
        - "all"
        - "not"
    example:
      field: "request_id"
      filter_type: "any"
      values:
      - "values"
      - "values"
  DeploymentBulkStopResponse:
    type: "object"
    required:
    - "processable"
    properties:
      processable:
        type: "array"
        description: "A list deployments that can be processed to be stopped"
        items:
          $ref: "#/definitions/DeploymentStopResponse"
    example:
      processable:
      - request_id: "request_id"
      - request_id: "request_id"
  DeploymentStopResponse:
    type: "object"
    required:
    - "request_id"
    properties:
      request_id:
        type: "string"
        description: "The id of the request for a deployment"
    example:
      request_id: "request_id"
  Deployment:
    type: "object"
    required:
    - "fqdn"
    - "public_ip"
    - "ready"
    - "request_id"
    - "status"
    - "whitelisting_active"
    properties:
      request_id:
        type: "string"
        example: "abc123"
        description: "Unique UUID"
      public_ip:
        type: "string"
        example: "100.10.0.85"
        description: "The public IP"
      status:
        type: "string"
        example: "Status.READY"
        description: "Current status of Deployment"
      ready:
        type: "boolean"
        example: true
        description: "if the deployment is ready"
      whitelisting_active:
        type: "boolean"
        example: true
        description: "if the deployment ACL is active"
      fqdn:
        type: "string"
        example: "abc123.test.edgegap.com"
        description: ""
      ports:
        type: "object"
        example:
          "7777":
            external: 31669
            internal: 7777
            protocol: "UDP"
            name: "7777"
            tls_upgrade: false
            link: "example.com:31669"
            proxy: 65002
          web:
            external: 31587
            internal: 8080
            protocol: "http"
            name: "web"
            tls_upgrade: true
            link: "https://example.com:31587"
            proxy: 65001
        additionalProperties:
          $ref: "#/definitions/PortMapping"
      location:
        description: "Location related information"
        $ref: "#/definitions/DeploymentLocation"
      tags:
        type: "array"
        description: "List of tags associated with the deployment"
        items:
          type: "string"
          example: "production"
      sockets:
        type: "integer"
        example: 5
        description: "The Capacity of the Deployment"
      sockets_usage:
        type: "integer"
        example: 2
        description: "The Capacity Usage of the Deployment"
      is_joinable_by_session:
        type: "boolean"
        description: "If the deployment is joinable by sessions"
    example:
      public_ip: "100.10.0.85"
      whitelisting_active: true
      is_joinable_by_session: true
      fqdn: "abc123.test.edgegap.com"
      ready: true
      location:
        continent: "North America"
        country: "Canada"
        administrative_division: "Quebec"
        city: "Montreal"
        timezone: "Eastern Time"
        latitude: 45.5088879999999988967829267494380474090576171875
        longitude: -73.56166799999999739156919531524181365966796875
      sockets: 5
      ports:
        "7777":
          external: 31669
          internal: 7777
          protocol: "UDP"
          name: "7777"
          tls_upgrade: false
          link: "example.com:31669"
          proxy: 65002
        web:
          external: 31587
          internal: 8080
          protocol: "http"
          name: "web"
          tls_upgrade: true
          link: "https://example.com:31587"
          proxy: 65001
      request_id: "abc123"
      status: "Status.READY"
      tags:
      - "production"
      - "production"
      sockets_usage: 2
  PortMapping:
    type: "object"
    properties:
      external:
        type: "integer"
        description: "The Port to Connect from Internet"
        minimum: 1
        maximum: 65535
      internal:
        type: "integer"
        description: "The internal Port of the Container"
        minimum: 1
        maximum: 65535
      protocol:
        type: "string"
        description: "The Protocol (i.e. 'TCP')"
      name:
        type: "string"
        description: "The Name of the port if given, default to internal port in string"
      tls_upgrade:
        type: "boolean"
        description: "If the port require TLS Upgrade"
      link:
        type: "string"
        description: "link of the port with scheme depending of the protocol"
      proxy:
        type: "integer"
        description: "Internal Proxy Mapping"
  DeploymentLocation:
    type: "object"
    required:
    - "administrative_division"
    - "city"
    - "continent"
    - "country"
    - "latitude"
    - "longitude"
    - "timezone"
    properties:
      city:
        type: "string"
        example: "Montreal"
        description: "City of the deployment"
      country:
        type: "string"
        example: "Canada"
        description: "Country of the deployment"
      continent:
        type: "string"
        example: "North America"
        description: "Continent of the deployment"
      administrative_division:
        type: "string"
        example: "Quebec"
        description: "Administrative division of the deployment"
      timezone:
        type: "string"
        example: "Eastern Time"
        description: "Timezone of the deployment"
      latitude:
        type: "number"
        example: 45.5088879999999988967829267494380474090576171875
        description: "Latitude of the deployment"
      longitude:
        type: "number"
        example: -73.56166799999999739156919531524181365966796875
        description: "Longitude of the deployment"
    example:
      continent: "North America"
      country: "Canada"
      administrative_division: "Quebec"
      city: "Montreal"
      timezone: "Eastern Time"
      latitude: 45.5088879999999988967829267494380474090576171875
      longitude: -73.56166799999999739156919531524181365966796875
  DeployModel:
    type: "object"
    required:
    - "app_name"
    properties:
      app_name:
        type: "string"
        description: "The name of the App you want to deploy"
      version_name:
        type: "string"
        description: "The name of the App Version you want to deploy, if not present,\
          \ the last version created is picked"
      is_public_app:
        type: "boolean"
        description: "If the Application is public or private. If not specified, we\
          \ will look for a private Application"
      ip_list:
        type: "array"
        description: "The List of IP of your user"
        items:
          type: "string"
          example: "1.2.3.4"
      geo_ip_list:
        type: "array"
        description: "The list of IP of your user with their location (latitude, longitude)"
        items:
          $ref: "#/definitions/GeoIpListModel"
      telemetry_profile_uuid_list:
        type: "array"
        items:
          type: "string"
      env_vars:
        type: "array"
        description: "A list of deployment variables"
        items:
          $ref: "#/definitions/DeployEnvModel"
      skip_telemetry:
        type: "boolean"
        description: "If you want to skip the Telemetry and use a geolocations decision\
          \ only"
      location:
        description: "If you want to specify a centroid for your deployment."
        $ref: "#/definitions/LocationModel"
      city:
        type: "string"
        example: "DEPRECATED - See `filters` instead."
        description: "DEPRECATED - See `filters` instead."
      country:
        type: "string"
        example: "DEPRECATED - See `filters` instead."
        description: "DEPRECATED - See `filters` instead."
      continent:
        type: "string"
        example: "DEPRECATED - See `filters` instead."
        description: "DEPRECATED - See `filters` instead."
      region:
        type: "string"
        example: "DEPRECATED - See `filters` instead."
        description: "DEPRECATED - See `filters` instead."
      administrative_division:
        type: "string"
        example: "DEPRECATED - See `filters` instead."
        description: "DEPRECATED - See `filters` instead."
      webhook_url:
        type: "string"
        example: "https://www.webhook.com/"
        description: "A web URL. This url will be called with method POST. The deployment\
          \ status will be send in JSON format"
      tags:
        type: "array"
        description: "The list of tags for your deployment"
        items:
          type: "string"
          example: "production"
      container_log_storage:
        description: "The container log storage options for the deployment"
        $ref: "#/definitions/ContainerLogStorageModel"
      filters:
        type: "array"
        description: "Filters to use while choosing the deployment location."
        items:
          $ref: "#/definitions/api-model-deploymentfilter"
      ap_sort_strategy:
        type: "string"
        example: "basic"
        description: "Algorithm used to select the edge location"
        enum:
        - "basic"
        - "weighted"
    example:
      telemetry_profile_uuid_list:
      - "telemetry_profile_uuid_list"
      - "telemetry_profile_uuid_list"
      continent: "DEPRECATED - See `filters` instead."
      country: "DEPRECATED - See `filters` instead."
      administrative_division: "DEPRECATED - See `filters` instead."
      ap_sort_strategy: "basic"
      webhook_url: "https://www.webhook.com/"
      city: "DEPRECATED - See `filters` instead."
      filters:
      - field: "city"
        filter_type: "any"
        values:
        - "values"
        - "values"
      - field: "city"
        filter_type: "any"
        values:
        - "values"
        - "values"
      ip_list:
      - "1.2.3.4"
      - "1.2.3.4"
      skip_telemetry: true
      env_vars:
      - is_hidden: true
        value: "value"
        key: "key"
      - is_hidden: true
        value: "value"
        key: "key"
      tags:
      - "production"
      - "production"
      app_name: "app_name"
      is_public_app: true
      version_name: "version_name"
      location:
        latitude: 1.46581298050294517310021547018550336360931396484375
        longitude: 5.962133916683182377482808078639209270477294921875
      geo_ip_list:
      - ip: "ip"
        latitude: 0.80082819046101150206595775671303272247314453125
        longitude: 6.02745618307040320615897144307382404804229736328125
      - ip: "ip"
        latitude: 0.80082819046101150206595775671303272247314453125
        longitude: 6.02745618307040320615897144307382404804229736328125
      region: "DEPRECATED - See `filters` instead."
      container_log_storage:
        enabled: true
        endpoint_storage: "endpoint_storage"
  GeoIpListModel:
    type: "object"
    required:
    - "ip"
    - "latitude"
    - "longitude"
    properties:
      ip:
        type: "string"
        description: "IP"
      latitude:
        type: "number"
        description: "Latitude"
      longitude:
        type: "number"
        description: "Longitude"
    example:
      ip: "ip"
      latitude: 0.80082819046101150206595775671303272247314453125
      longitude: 6.02745618307040320615897144307382404804229736328125
  DeployEnvModel:
    type: "object"
    required:
    - "key"
    - "value"
    properties:
      key:
        type: "string"
        description: "The Key to retrieve the value in your instance"
      value:
        type: "string"
        description: "The value to set in your instance"
      is_hidden:
        type: "boolean"
        description: "If set to true, the value will be encrypted during the process\
          \ of deployment"
    example:
      is_hidden: true
      value: "value"
      key: "key"
  LocationModel:
    type: "object"
    required:
    - "latitude"
    - "longitude"
    properties:
      latitude:
        type: "number"
        description: "Latitude"
      longitude:
        type: "number"
        description: "Longitude"
    example:
      latitude: 1.46581298050294517310021547018550336360931396484375
      longitude: 5.962133916683182377482808078639209270477294921875
  ContainerLogStorageModel:
    type: "object"
    required:
    - "enabled"
    properties:
      enabled:
        type: "boolean"
        description: "Will override the app version container log storage for this\
          \ deployment"
      endpoint_storage:
        type: "string"
        description: "The name of your endpoint storage. If container log storage\
          \ is enabled without this parameter, we will try to take the app version\
          \ endpoint storage. If there is no endpoint storage in your app version,\
          \ the container logs will not be stored. If we don't find any endpoint storage\
          \ associated with this name, the container logs will not be stored."
    example:
      enabled: true
      endpoint_storage: "endpoint_storage"
  api-model-deploymentfilter:
    type: "object"
    required:
    - "field"
    - "filter_type"
    - "values"
    properties:
      field:
        type: "string"
        example: "city"
        description: "Auto Generated Field for field"
        enum:
        - "city"
        - "country"
        - "continent"
        - "region"
        - "administrative_division"
        - "location_tags"
      values:
        type: "array"
        description: "Auto Generated Field for values"
        items:
          type: "string"
          description: "Auto Generated Field for values"
      filter_type:
        type: "string"
        example: "any"
        description: "Auto Generated Field for filter_type"
        enum:
        - "any"
        - "all"
        - "not"
    example:
      field: "city"
      filter_type: "any"
      values:
      - "values"
      - "values"
  Request:
    type: "object"
    required:
    - "container_log_storage"
    - "request_app"
    - "request_dns"
    - "request_id"
    - "request_user_count"
    - "request_version"
    properties:
      request_id:
        type: "string"
        example: "93924761ccde"
        description: "The Unique Identifier of the request"
      request_dns:
        type: "string"
        example: "supermario.93924761ccde.edgelab.io"
        description: "The URL to connect to the instance"
      request_app:
        type: "string"
        example: "supermario"
        description: "The Name of the App you requested"
      request_version:
        type: "string"
        example: "v1.0"
        description: "The name of the App Version you requested"
      request_user_count:
        type: "integer"
        example: 4
        description: "How Many Users your request contain"
      city:
        type: "string"
        description: "The city where the deployment is located"
      country:
        type: "string"
        description: "The country where the deployment is located"
      continent:
        type: "string"
        description: "The continent where the deployment is located"
      administrative_division:
        type: "string"
        description: "The administrative division where the deployment is located"
      tags:
        type: "array"
        description: "List of tags associated with the deployment"
        items:
          type: "string"
          example: "production"
      container_log_storage:
        description: "The container log storage options for the deployment"
        $ref: "#/definitions/ContainerLogStorageModel"
    example:
      request_app: "supermario"
      continent: "continent"
      country: "country"
      request_version: "v1.0"
      administrative_division: "administrative_division"
      request_user_count: 4
      city: "city"
      request_dns: "supermario.93924761ccde.edgelab.io"
      request_id: "93924761ccde"
      tags:
      - "production"
      - "production"
      container_log_storage:
        enabled: true
        endpoint_storage: "endpoint_storage"
  Deployments:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of active deployments"
        items:
          $ref: "#/definitions/DeploymentListData"
      total_count:
        type: "integer"
        description: "Total Objects in the Database"
      pagination:
        description: "Pagination Object"
        $ref: "#/definitions/Pagination"
      message:
        type: "array"
        description: "Extra Messages for the query"
        items:
          type: "string"
    example:
      pagination:
        number: 6
        has_previous: true
        next_page_number: 1
        has_next: true
        paginator:
          num_pages: 5
        previous_page_number: 5
      data:
      - start_time: "2024-05-26 12:00:45.831041"
        public_ip: "100.10.0.85"
        is_joinable_by_session: true
        fqdn: "abc123.test.edgegap.com"
        ready: true
        sockets: 5
        ports:
          "7777":
            external: 31669
            internal: 7777
            protocol: "UDP"
            name: "7777"
            tls_upgrade: false
            link: "example.com:31669"
            proxy: 65002
          web:
            external: 31587
            internal: 8080
            protocol: "http"
            name: "web"
            tls_upgrade: true
            link: "https://example.com:31587"
            proxy: 65001
        request_id: "2d35052ec4e9"
        tags:
        - "production"
        - "production"
        sockets_usage: 2
      - start_time: "2024-05-26 12:00:45.831041"
        public_ip: "100.10.0.85"
        is_joinable_by_session: true
        fqdn: "abc123.test.edgegap.com"
        ready: true
        sockets: 5
        ports:
          "7777":
            external: 31669
            internal: 7777
            protocol: "UDP"
            name: "7777"
            tls_upgrade: false
            link: "example.com:31669"
            proxy: 65002
          web:
            external: 31587
            internal: 8080
            protocol: "http"
            name: "web"
            tls_upgrade: true
            link: "https://example.com:31587"
            proxy: 65001
        request_id: "2d35052ec4e9"
        tags:
        - "production"
        - "production"
        sockets_usage: 2
      total_count: 0
      message:
      - "message"
      - "message"
  DeploymentListData:
    type: "object"
    required:
    - "fqdn"
    - "public_ip"
    - "ready"
    - "request_id"
    - "start_time"
    properties:
      request_id:
        type: "string"
        example: "2d35052ec4e9"
        description: "Unique UUID"
      fqdn:
        type: "string"
        example: "abc123.test.edgegap.com"
        description: "The FQDN that allow to connect to your deployment"
      start_time:
        type: "string"
        example: "2024-05-26 12:00:45.831041"
        description: "Timestamp of the deployment when it is up and running"
      ready:
        type: "boolean"
        example: true
        description: "If the deployment is ready"
      public_ip:
        type: "string"
        example: "100.10.0.85"
        description: "The public IP"
      ports:
        type: "object"
        example:
          "7777":
            external: 31669
            internal: 7777
            protocol: "UDP"
            name: "7777"
            tls_upgrade: false
            link: "example.com:31669"
            proxy: 65002
          web:
            external: 31587
            internal: 8080
            protocol: "http"
            name: "web"
            tls_upgrade: true
            link: "https://example.com:31587"
            proxy: 65001
        additionalProperties:
          $ref: "#/definitions/PortMapping"
      tags:
        type: "array"
        description: "List of tags associated with the deployment"
        items:
          type: "string"
          example: "production"
      sockets:
        type: "integer"
        example: 5
        description: "The capacity of the deployment"
      sockets_usage:
        type: "integer"
        example: 2
        description: "The capacity usage of the deployment"
      is_joinable_by_session:
        type: "boolean"
        description: "If the deployment is joinable by sessions"
    example:
      start_time: "2024-05-26 12:00:45.831041"
      public_ip: "100.10.0.85"
      is_joinable_by_session: true
      fqdn: "abc123.test.edgegap.com"
      ready: true
      sockets: 5
      ports:
        "7777":
          external: 31669
          internal: 7777
          protocol: "UDP"
          name: "7777"
          tls_upgrade: false
          link: "example.com:31669"
          proxy: 65002
        web:
          external: 31587
          internal: 8080
          protocol: "http"
          name: "web"
          tls_upgrade: true
          link: "https://example.com:31587"
          proxy: 65001
      request_id: "2d35052ec4e9"
      tags:
      - "production"
      - "production"
      sockets_usage: 2
  Pagination:
    type: "object"
    properties:
      number:
        type: "integer"
        description: "Current page number"
      next_page_number:
        type: "integer"
        description: "Next page number"
      previous_page_number:
        type: "integer"
        description: "Previous page number"
      paginator:
        $ref: "#/definitions/Paginator"
      has_next:
        type: "boolean"
        description: "If there is a next page"
      has_previous:
        type: "boolean"
        description: "If there is a previous page"
    example:
      number: 6
      has_previous: true
      next_page_number: 1
      has_next: true
      paginator:
        num_pages: 5
      previous_page_number: 5
  Paginator:
    type: "object"
    properties:
      num_pages:
        type: "integer"
        description: "Total pages count"
    example:
      num_pages: 5
  api-model-containerlogs:
    type: "object"
    properties:
      logs:
        type: "string"
        description: "Auto Generated Field for logs"
      encoding:
        type: "string"
        description: "Auto Generated Field for encoding"
      crash_logs:
        type: "string"
        description: "Auto Generated Field for crash_logs"
      crash_data:
        $ref: "#/definitions/api-model-containercrashdata"
      logs_link:
        type: "string"
        description: "Auto Generated Field for logs_link"
    example:
      crash_data:
        restart_count: 6
        exit_code: 0
        message: "message"
      crash_logs: "crash_logs"
      logs_link: "logs_link"
      encoding: "encoding"
      logs: "logs"
  api-model-containercrashdata:
    type: "object"
    properties:
      exit_code:
        type: "integer"
        description: "Auto Generated Field for exit_code"
      message:
        type: "string"
        description: "Auto Generated Field for message"
      restart_count:
        type: "integer"
        description: "Auto Generated Field for restart_count"
    example:
      restart_count: 6
      exit_code: 0
      message: "message"
  Status:
    type: "object"
    required:
    - "app_name"
    - "app_version"
    - "current_status"
    - "elapsed_time"
    - "error"
    - "fqdn"
    - "public_ip"
    - "request_id"
    - "running"
    - "start_time"
    - "whitelisting_active"
    properties:
      request_id:
        type: "string"
        description: "The Unique ID of the Deployment's request"
      fqdn:
        type: "string"
        example: "abc123.test.edgegap.com"
        description: "The FQDN that allow to connect to your Deployment"
      app_name:
        type: "string"
        example: "test"
        description: "The name of the deployed App"
      app_version:
        type: "string"
        example: "v1"
        description: "The version of the deployed App"
      current_status:
        type: "string"
        example: "Status.DEPLOYING"
        description: "The current status of the Deployment"
      running:
        type: "boolean"
        example: true
        description: "True if the current Deployment is ready to be connected and\
          \ running"
      whitelisting_active:
        type: "boolean"
        example: true
        description: "True if the current Deployment is ACL protected"
      start_time:
        type: "string"
        example: "2024-05-26 12:00:45.831041"
        description: "Timestamp of the Deployment when it is up and running"
      removal_time:
        type: "string"
        example: "2024-05-26 12:00:45.831041"
        description: "Timestamp of the end of the Deployment"
      elapsed_time:
        type: "integer"
        description: "Time since the Deployment is up and running in seconds"
      last_status:
        type: "string"
        example: "Status.SEEKING"
        description: "The last status of the Deployment"
      error:
        type: "boolean"
        example: true
        description: "True if there is an error with the Deployment"
      error_detail:
        type: "string"
        description: "The error details of the Deployment"
      ports:
        type: "object"
        example:
          "7777":
            external: 31669
            internal: 7777
            protocol: "UDP"
            name: "7777"
            tls_upgrade: false
            link: "example.com:31669"
            proxy: 65002
          web:
            external: 31587
            internal: 8080
            protocol: "http"
            name: "web"
            tls_upgrade: true
            link: "https://example.com:31587"
            proxy: 65001
        additionalProperties:
          $ref: "#/definitions/PortMapping"
      public_ip:
        type: "string"
        example: "100.10.0.85"
        description: "The public IP"
      sessions:
        type: "array"
        description: "List of Active Sessions if Deployment App is Session Based"
        items:
          $ref: "#/definitions/DeploymentSessionContext"
      location:
        description: "Location related information"
        $ref: "#/definitions/DeploymentLocation"
      tags:
        type: "array"
        description: "List of tags associated with the deployment"
        items:
          type: "string"
          example: "production"
      sockets:
        type: "integer"
        example: 5
        description: "The Capacity of the Deployment"
      sockets_usage:
        type: "integer"
        example: 2
        description: "The Capacity Usage of the Deployment"
      command:
        type: "string"
        description: "The command to use in the container, null mean it will take\
          \ the default of the container"
      arguments:
        type: "string"
        description: "The arguments to use in the container, null mean it will take\
          \ the default of the container"
    example:
      sessions:
      - user_count: 10
        ready: true
        kind: "DEFAULT | SEATS | MATCH"
        session_id: "abc123"
        status: "Status.READY"
        linked: true
      - user_count: 10
        ready: true
        kind: "DEFAULT | SEATS | MATCH"
        session_id: "abc123"
        status: "Status.READY"
        linked: true
      whitelisting_active: true
      public_ip: "100.10.0.85"
      app_version: "v1"
      fqdn: "abc123.test.edgegap.com"
      error_detail: "error_detail"
      last_status: "Status.SEEKING"
      removal_time: "2024-05-26 12:00:45.831041"
      error: true
      ports:
        "7777":
          external: 31669
          internal: 7777
          protocol: "UDP"
          name: "7777"
          tls_upgrade: false
          link: "example.com:31669"
          proxy: 65002
        web:
          external: 31587
          internal: 8080
          protocol: "http"
          name: "web"
          tls_upgrade: true
          link: "https://example.com:31587"
          proxy: 65001
      command: "command"
      tags:
      - "production"
      - "production"
      running: true
      app_name: "test"
      start_time: "2024-05-26 12:00:45.831041"
      elapsed_time: 0
      current_status: "Status.DEPLOYING"
      location:
        continent: "North America"
        country: "Canada"
        administrative_division: "Quebec"
        city: "Montreal"
        timezone: "Eastern Time"
        latitude: 45.5088879999999988967829267494380474090576171875
        longitude: -73.56166799999999739156919531524181365966796875
      arguments: "arguments"
      sockets: 5
      request_id: "request_id"
      sockets_usage: 2
  DeploymentSessionContext:
    type: "object"
    required:
    - "kind"
    - "linked"
    - "ready"
    - "session_id"
    - "status"
    - "user_count"
    properties:
      session_id:
        type: "string"
        example: "abc123"
        description: "Unique UUID"
      status:
        type: "string"
        example: "Status.READY"
        description: "Current status of the session"
      ready:
        type: "boolean"
        example: true
        description: "If the session is linked to a Ready deployment"
      linked:
        type: "boolean"
        example: true
        description: "If the session is linked to a deployment"
      kind:
        type: "string"
        example: "DEFAULT | SEATS | MATCH"
        description: "Type of session created"
      user_count:
        type: "integer"
        example: 10
        description: "Count of user this session currently have"
    example:
      user_count: 10
      ready: true
      kind: "DEFAULT | SEATS | MATCH"
      session_id: "abc123"
      status: "Status.READY"
      linked: true
  Delete:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        example: "Instance 93924761ccde will be deleted"
        description: "A message depending of the request termination"
      deployment_summary:
        description: "The status/summary of the deployment"
        $ref: "#/definitions/Status"
    example:
      message: "Instance 93924761ccde will be deleted"
      deployment_summary:
        sessions:
        - user_count: 10
          ready: true
          kind: "DEFAULT | SEATS | MATCH"
          session_id: "abc123"
          status: "Status.READY"
          linked: true
        - user_count: 10
          ready: true
          kind: "DEFAULT | SEATS | MATCH"
          session_id: "abc123"
          status: "Status.READY"
          linked: true
        whitelisting_active: true
        public_ip: "100.10.0.85"
        app_version: "v1"
        fqdn: "abc123.test.edgegap.com"
        error_detail: "error_detail"
        last_status: "Status.SEEKING"
        removal_time: "2024-05-26 12:00:45.831041"
        error: true
        ports:
          "7777":
            external: 31669
            internal: 7777
            protocol: "UDP"
            name: "7777"
            tls_upgrade: false
            link: "example.com:31669"
            proxy: 65002
          web:
            external: 31587
            internal: 8080
            protocol: "http"
            name: "web"
            tls_upgrade: true
            link: "https://example.com:31587"
            proxy: 65001
        command: "command"
        tags:
        - "production"
        - "production"
        running: true
        app_name: "test"
        start_time: "2024-05-26 12:00:45.831041"
        elapsed_time: 0
        current_status: "Status.DEPLOYING"
        location:
          continent: "North America"
          country: "Canada"
          administrative_division: "Quebec"
          city: "Montreal"
          timezone: "Eastern Time"
          latitude: 45.5088879999999988967829267494380474090576171875
          longitude: -73.56166799999999739156919531524181365966796875
        arguments: "arguments"
        sockets: 5
        request_id: "request_id"
        sockets_usage: 2
  DeleteRequestReceived:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        example: "1a9e4ff02cce - Delete request will be processed soon"
        description: "Message to confirm that the delete request has been received"
  AppVersionDelete:
    type: "object"
    properties:
      success:
        type: "boolean"
        description: "If the creation happened correctly"
      message:
        type: "string"
    example:
      success: true
      message: "message"
  AppVersionList:
    type: "object"
    properties:
      versions:
        type: "array"
        items:
          $ref: "#/definitions/AppVersionPayload"
      total_count:
        type: "integer"
    example:
      versions:
      - docker_tag: "docker_tag"
        req_cpu: 256
        whitelisting_active: false
        req_memory: 256
        envs:
        - is_secret: true
          value: "value"
          key: "key"
        - is_secret: true
          value: "value"
          key: "key"
        ports:
        - protocol: "TCP"
          port: 5555
          to_check: true
          name: "Game port"
          tls_upgrade: false
        - protocol: "TCP"
          port: 5555
          to_check: true
          name: "Game port"
          tls_upgrade: false
        private_username: "private_username"
        cache_max_hour: 13
        docker_repository: "docker_repository"
        inject_context_env: true
        session_config:
          kind: "Seat"
          empty_ttl: 60
          autodeploy: true
          sockets: 10
          session_max_duration: 60
        verify_image: false
        cache_min_hour: 1
        time_to_deploy: 15
        is_active: true
        termination_grace_period_seconds: 531
        req_video: 256
        private_token: "private_token"
        use_telemetry: true
        max_duration: 30
        probe:
          rejected_ping: 180
          optimal_ping: 60
        name: "name"
        force_cache: true
        enable_all_locations: false
        docker_image: "docker_image"
        endpoint_storage: "endpoint_storage"
      - docker_tag: "docker_tag"
        req_cpu: 256
        whitelisting_active: false
        req_memory: 256
        envs:
        - is_secret: true
          value: "value"
          key: "key"
        - is_secret: true
          value: "value"
          key: "key"
        ports:
        - protocol: "TCP"
          port: 5555
          to_check: true
          name: "Game port"
          tls_upgrade: false
        - protocol: "TCP"
          port: 5555
          to_check: true
          name: "Game port"
          tls_upgrade: false
        private_username: "private_username"
        cache_max_hour: 13
        docker_repository: "docker_repository"
        inject_context_env: true
        session_config:
          kind: "Seat"
          empty_ttl: 60
          autodeploy: true
          sockets: 10
          session_max_duration: 60
        verify_image: false
        cache_min_hour: 1
        time_to_deploy: 15
        is_active: true
        termination_grace_period_seconds: 531
        req_video: 256
        private_token: "private_token"
        use_telemetry: true
        max_duration: 30
        probe:
          rejected_ping: 180
          optimal_ping: 60
        name: "name"
        force_cache: true
        enable_all_locations: false
        docker_image: "docker_image"
        endpoint_storage: "endpoint_storage"
      total_count: 0
  AppVersionPayload:
    type: "object"
    required:
    - "docker_image"
    - "docker_repository"
    - "docker_tag"
    - "name"
    - "req_cpu"
    - "req_memory"
    properties:
      name:
        type: "string"
        description: "The Version Name"
        minLength: 1
        maxLength: 64
      is_active:
        type: "boolean"
        description: "If the Version is active currently in the system"
      docker_repository:
        type: "string"
        description: "The Repository where the image is (i.e. 'harbor.edgegap.com'\
          \ or 'docker.io')"
      docker_image:
        type: "string"
        description: "The name of your image (i.e. 'edgegap/demo')"
      docker_tag:
        type: "string"
        description: "The tag of your image (i.e. '0.1.2')"
      private_username:
        type: "string"
        description: "The username to access the docker repository"
      private_token:
        type: "string"
        description: "The Private Password or Token of the username (We recommend\
          \ to use a token)"
      req_cpu:
        type: "integer"
        example: 256
        description: "Units of vCPU needed (1024 = 1vcpu)"
        minimum: 100
      req_memory:
        type: "integer"
        example: 256
        description: "Units of memory in MB needed (1024 = 1GB)"
        minimum: 100
      req_video:
        type: "integer"
        example: 256
        description: "Units of GPU needed (1024 = 1 GPU)"
        minimum: 0
      max_duration:
        type: "integer"
        example: 30
        description: "The Max duration of the game in minute. 0 means forever."
      use_telemetry:
        type: "boolean"
        description: "Allow to inject ASA Variables"
      inject_context_env:
        type: "boolean"
        description: "DEPRECATED - The context environment variables are now injected\
          \ into all deployments by default. No changes are required. (https://docs.edgegap.com/docs/deployment/injected-variables)"
      whitelisting_active:
        type: "boolean"
        example: false
        description: "ACL Protection is active"
      force_cache:
        type: "boolean"
        description: "Allow faster deployment by caching your container image in every\
          \ Edge site"
      cache_min_hour:
        type: "integer"
        description: "Start of the preferred interval for caching your container"
        minimum: 0
        maximum: 23
      cache_max_hour:
        type: "integer"
        description: "End of the preferred interval for caching your container"
        minimum: 0
        maximum: 23
      time_to_deploy:
        type: "integer"
        example: 15
        description: "Estimated maximum time in seconds to deploy, after this time\
          \ we will consider it not working and retry."
        minimum: 15
      enable_all_locations:
        type: "boolean"
        example: false
        description: "Enable every location available. By enabling this, your request\
          \ will use every potential location, including those which may require a\
          \ longer time to deploy. This means that your application could take significantly\
          \ more time before being ready. We do not recommend this feature for live\
          \ games. This functionality does not support ACL and Caching at the moment."
      session_config:
        description: "Parameters defining the behavior of a session-based app version.\
          \ If set, the app is considered to be session-based."
        $ref: "#/definitions/AppVersionCreateSessionConfig"
      ports:
        type: "array"
        items:
          $ref: "#/definitions/AppVersionPort"
      probe:
        $ref: "#/definitions/AppVersionProbe"
      envs:
        type: "array"
        items:
          $ref: "#/definitions/AppVersionEnv"
      verify_image:
        type: "boolean"
        description: "By enabling the verify_image option, your image infos (docker_repository,\
          \ docker_image, docker_tag) will be tested."
        default: false
      termination_grace_period_seconds:
        type: "integer"
        description: "Termination grace period in seconds after the SIGTERM signal\
          \ has been sent"
        minimum: 5
        maximum: 3600
      endpoint_storage:
        type: "string"
        description: "The name of the endpoint storage to link"
    example:
      docker_tag: "docker_tag"
      req_cpu: 256
      whitelisting_active: false
      req_memory: 256
      envs:
      - is_secret: true
        value: "value"
        key: "key"
      - is_secret: true
        value: "value"
        key: "key"
      ports:
      - protocol: "TCP"
        port: 5555
        to_check: true
        name: "Game port"
        tls_upgrade: false
      - protocol: "TCP"
        port: 5555
        to_check: true
        name: "Game port"
        tls_upgrade: false
      private_username: "private_username"
      cache_max_hour: 13
      docker_repository: "docker_repository"
      inject_context_env: true
      session_config:
        kind: "Seat"
        empty_ttl: 60
        autodeploy: true
        sockets: 10
        session_max_duration: 60
      verify_image: false
      cache_min_hour: 1
      time_to_deploy: 15
      is_active: true
      termination_grace_period_seconds: 531
      req_video: 256
      private_token: "private_token"
      use_telemetry: true
      max_duration: 30
      probe:
        rejected_ping: 180
        optimal_ping: 60
      name: "name"
      force_cache: true
      enable_all_locations: false
      docker_image: "docker_image"
      endpoint_storage: "endpoint_storage"
  AppVersionCreateSessionConfig:
    type: "object"
    required:
    - "kind"
    - "sockets"
    properties:
      kind:
        type: "string"
        example: "Seat"
        description: "The kind of session to create. If 'Default' if chosen, the 'session_config'\
          \ will be ignored. The kind of session must be: Default, Seat, Match"
        enum:
        - "Default"
        - "Seat"
        - "Match"
      sockets:
        type: "integer"
        example: 10
        description: "The number of game slots on each deployment of this app version."
        minimum: 1
      autodeploy:
        type: "boolean"
        description: "If a deployment should be made autonomously if there is not\
          \ enough sockets open on a new session."
      empty_ttl:
        type: "integer"
        example: 60
        description: "The number of minutes a deployment of this app version can spend\
          \ with no session connected before being terminated."
        minimum: 1
      session_max_duration:
        type: "integer"
        example: 60
        description: "The number of minutes after a session-type deployment has been\
          \ terminated to remove all the session information connected to your deployment.\
          \ Minimum and default value is set to 60 minutes so you can manage your\
          \ session termination before it is removed."
        minimum: 60
    example:
      kind: "Seat"
      empty_ttl: 60
      autodeploy: true
      sockets: 10
      session_max_duration: 60
  AppVersionPort:
    type: "object"
    required:
    - "port"
    - "protocol"
    properties:
      port:
        type: "integer"
        example: 5555
        description: "The Port to Expose your service. Port 0 reserved for one-to-one\
          \ port mapping. See our doc for more information."
        minimum: 0
        maximum: 59999
      protocol:
        type: "string"
        example: "TCP"
        description: "Available protocols: TCP, UDP, TCP/UDP, HTTP, HTTPS, WS or WSS"
      to_check:
        type: "boolean"
        description: "If the port must be verified by our port validations"
        default: true
      tls_upgrade:
        type: "boolean"
        description: "Enabling with HTTP or WS will inject a sidecar proxy that upgrades\
          \ the connection with TLS"
        default: false
      name:
        type: "string"
        example: "Game port"
        description: "An optional name for the port for easier handling. Mandatory\
          \ if using port 0"
    example:
      protocol: "TCP"
      port: 5555
      to_check: true
      name: "Game port"
      tls_upgrade: false
  AppVersionProbe:
    type: "object"
    required:
    - "optimal_ping"
    - "rejected_ping"
    properties:
      optimal_ping:
        type: "integer"
        example: 60
        description: "Your optimal value for Latency"
        minimum: 1
      rejected_ping:
        type: "integer"
        example: 180
        description: "Your reject value for Latency"
        minimum: 1
    example:
      rejected_ping: 180
      optimal_ping: 60
  AppVersionEnv:
    type: "object"
    required:
    - "key"
    - "value"
    properties:
      key:
        type: "string"
        description: "The Key where the Environment Variable will be set"
      value:
        type: "string"
        description: "The Value to retrieve at the Key"
      is_secret:
        type: "boolean"
        description: "This will encrypt the value in our database, won't be readable\
          \ by external source"
    example:
      is_secret: true
      value: "value"
      key: "key"
  AppVersionUpdatePayload:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The Version Name"
        minLength: 1
        maxLength: 64
      is_active:
        type: "boolean"
        description: "If the Version is active currently in the system"
      docker_repository:
        type: "string"
        description: "The Repository where the image is (i.e. 'harbor.edgegap.com'\
          \ or 'docker.io')"
      docker_image:
        type: "string"
        description: "The name of your image (i.e. 'edgegap/demo')"
      docker_tag:
        type: "string"
        description: "The tag of your image (i.e. '0.1.2')"
      private_username:
        type: "string"
        description: "The username to access the docker repository"
      private_token:
        type: "string"
        description: "The Private Password or Token of the username (We recommend\
          \ to use a token)"
      req_cpu:
        type: "integer"
        example: 256
        description: "Units of vCPU needed (1024 = 1vcpu)"
        minimum: 100
      req_memory:
        type: "integer"
        example: 256
        description: "Units of memory in MB needed (1024 = 1GB)"
        minimum: 100
      req_video:
        type: "integer"
        example: 256
        description: "Units of GPU needed (1024= 1 GPU)"
        minimum: 0
      use_telemetry:
        type: "boolean"
        description: "Allow to inject ASA Variables"
      inject_context_env:
        type: "boolean"
        description: "DEPRECATED - The context environment variables are now injected\
          \ into all deployments by default. No changes are required. (https://docs.edgegap.com/docs/deployment/injected-variables)"
      whitelisting_active:
        type: "boolean"
        description: "ACL Protection is active"
      force_cache:
        type: "boolean"
        description: "Allow faster deployment by caching your container image in every\
          \ Edge site"
      cache_min_hour:
        type: "integer"
        description: "Start of the preferred interval for caching your container"
        minimum: 0
        maximum: 23
      cache_max_hour:
        type: "integer"
        description: "End of the preferred interval for caching your container"
        minimum: 0
        maximum: 23
      time_to_deploy:
        type: "integer"
        example: 15
        description: "Estimated maximum time in seconds to deploy, after this time\
          \ we will consider it not working and retry."
        minimum: 15
      enable_all_locations:
        type: "boolean"
        description: "Enable every location available. By enabling this, your request\
          \ will use every potential location, including those which may require a\
          \ longer time to deploy. This means that your application may take up to\
          \ 2 minutes before being up and ready. This functionality does not support\
          \ ACL and Caching at the moment."
      session_config:
        description: "Parameters defining the behavior of a session-based app version.\
          \ If set, the app is considered to be session-based."
        $ref: "#/definitions/AppVersionUpdateSessionConfig"
      ports:
        type: "array"
        items:
          $ref: "#/definitions/AppVersionPort"
      probe:
        $ref: "#/definitions/AppVersionProbe"
      envs:
        type: "array"
        items:
          $ref: "#/definitions/AppVersionEnv"
      termination_grace_period_seconds:
        type: "integer"
        description: "Termination grace period in seconds after the SIGTERM signal\
          \ has been sent"
        minimum: 5
        maximum: 3600
      verify_image:
        type: "boolean"
        description: "By enabling the verify_image option, your image infos (docker_repository,\
          \ docker_image, docker_tag) will be tested."
        default: false
      endpoint_storage:
        type: "string"
        description: "The name of the endpoint storage to link"
    example:
      docker_tag: "docker_tag"
      req_cpu: 256
      whitelisting_active: true
      req_memory: 256
      envs:
      - is_secret: true
        value: "value"
        key: "key"
      - is_secret: true
        value: "value"
        key: "key"
      ports:
      - protocol: "TCP"
        port: 5555
        to_check: true
        name: "Game port"
        tls_upgrade: false
      - protocol: "TCP"
        port: 5555
        to_check: true
        name: "Game port"
        tls_upgrade: false
      private_username: "private_username"
      cache_max_hour: 13
      docker_repository: "docker_repository"
      inject_context_env: true
      session_config:
        kind: "Seat"
        empty_ttl: 60
        autodeploy: true
        sockets: 10
        session_max_duration: 60
      verify_image: false
      cache_min_hour: 1
      time_to_deploy: 15
      is_active: true
      termination_grace_period_seconds: 531
      req_video: 256
      private_token: "private_token"
      use_telemetry: true
      probe:
        rejected_ping: 180
        optimal_ping: 60
      name: "name"
      force_cache: true
      enable_all_locations: true
      docker_image: "docker_image"
      endpoint_storage: "endpoint_storage"
  AppVersionUpdateSessionConfig:
    type: "object"
    properties:
      kind:
        type: "string"
        example: "Seat"
        description: "The kind of session to create. If 'Default' if chosen, the application\
          \ will be handled like a normal application. The kind of session must be:\
          \ Default, Seat, Match"
        enum:
        - "Default"
        - "Seat"
        - "Match"
      sockets:
        type: "integer"
        example: 10
        description: "The number of game slots on each deployment of this app version."
        minimum: 1
      autodeploy:
        type: "boolean"
        description: "If a deployment should be made autonomously if there is not\
          \ enough sockets open on a new session."
      empty_ttl:
        type: "integer"
        example: 60
        description: "The number of minutes a deployment of this app version can spend\
          \ with no session connected before being terminated."
        minimum: 1
      session_max_duration:
        type: "integer"
        example: 60
        description: "The number of minutes after a session-type deployment has been\
          \ terminated to remove all the session information connected to your deployment.\
          \ Minimum and default value is set to 60 minutes so you can manage your\
          \ session termination before it is removed."
        minimum: 60
    example:
      kind: "Seat"
      empty_ttl: 60
      autodeploy: true
      sockets: 10
      session_max_duration: 60
  AppVersionUpdateResponse:
    type: "object"
    properties:
      success:
        type: "boolean"
        description: "If the creation happened correctly"
      version:
        $ref: "#/definitions/AppVersionPayload"
    example:
      success: true
      version:
        docker_tag: "docker_tag"
        req_cpu: 256
        whitelisting_active: false
        req_memory: 256
        envs:
        - is_secret: true
          value: "value"
          key: "key"
        - is_secret: true
          value: "value"
          key: "key"
        ports:
        - protocol: "TCP"
          port: 5555
          to_check: true
          name: "Game port"
          tls_upgrade: false
        - protocol: "TCP"
          port: 5555
          to_check: true
          name: "Game port"
          tls_upgrade: false
        private_username: "private_username"
        cache_max_hour: 13
        docker_repository: "docker_repository"
        inject_context_env: true
        session_config:
          kind: "Seat"
          empty_ttl: 60
          autodeploy: true
          sockets: 10
          session_max_duration: 60
        verify_image: false
        cache_min_hour: 1
        time_to_deploy: 15
        is_active: true
        termination_grace_period_seconds: 531
        req_video: 256
        private_token: "private_token"
        use_telemetry: true
        max_duration: 30
        probe:
          rejected_ping: 180
          optimal_ping: 60
        name: "name"
        force_cache: true
        enable_all_locations: false
        docker_image: "docker_image"
        endpoint_storage: "endpoint_storage"
  AppVersionCreateResponse:
    type: "object"
    properties:
      success:
        type: "boolean"
        description: "If the creation happened correctly"
      version:
        $ref: "#/definitions/AppVersionPayload"
    example:
      success: true
      version:
        docker_tag: "docker_tag"
        req_cpu: 256
        whitelisting_active: false
        req_memory: 256
        envs:
        - is_secret: true
          value: "value"
          key: "key"
        - is_secret: true
          value: "value"
          key: "key"
        ports:
        - protocol: "TCP"
          port: 5555
          to_check: true
          name: "Game port"
          tls_upgrade: false
        - protocol: "TCP"
          port: 5555
          to_check: true
          name: "Game port"
          tls_upgrade: false
        private_username: "private_username"
        cache_max_hour: 13
        docker_repository: "docker_repository"
        inject_context_env: true
        session_config:
          kind: "Seat"
          empty_ttl: 60
          autodeploy: true
          sockets: 10
          session_max_duration: 60
        verify_image: false
        cache_min_hour: 1
        time_to_deploy: 15
        is_active: true
        termination_grace_period_seconds: 531
        req_video: 256
        private_token: "private_token"
        use_telemetry: true
        max_duration: 30
        probe:
          rejected_ping: 180
          optimal_ping: 60
        name: "name"
        force_cache: true
        enable_all_locations: false
        docker_image: "docker_image"
        endpoint_storage: "endpoint_storage"
  Applications:
    type: "object"
    properties:
      applications:
        type: "array"
        items:
          $ref: "#/definitions/Application"
    example:
      applications:
      - is_telemetry_agent_active: false
        image: "iVBORw0KGgoAAAANSUhEUg[...]AAABJRU5ErkJggg=="
        last_updated: "2024-05-26 12:00:45.831041"
        is_active: true
        create_time: "2024-05-26 12:00:45.831041"
        name: "Example App"
      - is_telemetry_agent_active: false
        image: "iVBORw0KGgoAAAANSUhEUg[...]AAABJRU5ErkJggg=="
        last_updated: "2024-05-26 12:00:45.831041"
        is_active: true
        create_time: "2024-05-26 12:00:45.831041"
        name: "Example App"
  Application:
    type: "object"
    required:
    - "create_time"
    - "is_active"
    - "last_updated"
    - "name"
    properties:
      name:
        type: "string"
        example: "Example App"
        description: "Application name"
      is_active:
        type: "boolean"
        example: true
        description: "If the application can be deployed"
      is_telemetry_agent_active:
        type: "boolean"
        example: false
        description: "If the telemetry agent is installed on the versions of this\
          \ app."
      image:
        type: "string"
        example: "iVBORw0KGgoAAAANSUhEUg[...]AAABJRU5ErkJggg=="
        description: "Image base64 string"
      create_time:
        type: "string"
        example: "2024-05-26 12:00:45.831041"
        description: "Creation date"
      last_updated:
        type: "string"
        example: "2024-05-26 12:00:45.831041"
        description: "Date of the last update"
    example:
      is_telemetry_agent_active: false
      image: "iVBORw0KGgoAAAANSUhEUg[...]AAABJRU5ErkJggg=="
      last_updated: "2024-05-26 12:00:45.831041"
      is_active: true
      create_time: "2024-05-26 12:00:45.831041"
      name: "Example App"
  ApplicationPatch:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Example App"
        description: "Application name"
        minLength: 3
        maxLength: 64
      is_active:
        type: "boolean"
        example: true
        description: "If the application can be deployed"
      is_telemetry_agent_active:
        type: "boolean"
        example: false
        description: "If the telemetry agent is installed on the versions of this\
          \ app."
      image:
        type: "string"
        example: "iVBORw0KGgoAAAANSUhEUg[...]AAABJRU5ErkJggg=="
        description: "Image base64 string"
    example:
      is_telemetry_agent_active: false
      image: "iVBORw0KGgoAAAANSUhEUg[...]AAABJRU5ErkJggg=="
      is_active: true
      name: "Example App"
  ApplicationPost:
    type: "object"
    required:
    - "image"
    - "is_active"
    - "name"
    properties:
      name:
        type: "string"
        example: "Example App"
        description: "The application name"
        minLength: 1
        maxLength: 64
      is_active:
        type: "boolean"
        example: true
        description: "If the application can be deployed"
      is_telemetry_agent_active:
        type: "boolean"
        example: false
        description: "If the telemetry agent is installed on the versions of this\
          \ app."
      image:
        type: "string"
        example: "iVBORw0KGgoAAAANSUhEUg[...]AAABJRU5ErkJggg=="
        description: "Image base64 string"
    example:
      is_telemetry_agent_active: false
      image: "iVBORw0KGgoAAAANSUhEUg[...]AAABJRU5ErkJggg=="
      is_active: true
      name: "Example App"
  AppVersionWhitelistEntryPayload:
    type: "object"
    required:
    - "cidr"
    properties:
      cidr:
        type: "string"
        example: "1.2.3.4/16"
        description: "CIDR to allow"
      label:
        type: "string"
        example: "Matchmaker"
        description: "Label to organized your entries"
      is_active:
        type: "boolean"
        description: "If the Rule will be applied on runtime"
    example:
      is_active: true
      cidr: "1.2.3.4/16"
      label: "Matchmaker"
  AppVersionWhitelistEntrySuccess:
    type: "object"
    required:
    - "success"
    properties:
      success:
        type: "boolean"
        description: "if the operation succeed"
      whitelist_entry:
        $ref: "#/definitions/AppVersionWhitelistEntry"
    example:
      success: true
      whitelist_entry:
        is_active: true
        cidr: "1.2.3.4/16"
        id: "1"
        label: "Matchmaker"
  AppVersionWhitelistEntry:
    type: "object"
    required:
    - "cidr"
    - "id"
    properties:
      id:
        type: "string"
        example: "1"
        description: "Unique ID of the entry"
      cidr:
        type: "string"
        example: "1.2.3.4/16"
        description: "CIDR to allow"
      label:
        type: "string"
        example: "Matchmaker"
        description: "Label to organized your entries"
      is_active:
        type: "boolean"
        description: "If the Rule will be applied on runtime"
    example:
      is_active: true
      cidr: "1.2.3.4/16"
      id: "1"
      label: "Matchmaker"
  AppVersionWhitelistResponse:
    type: "object"
    properties:
      whitelist_entries:
        type: "array"
        items:
          $ref: "#/definitions/AppVersionWhitelistEntry"
    example:
      whitelist_entries:
      - is_active: true
        cidr: "1.2.3.4/16"
        id: "1"
        label: "Matchmaker"
      - is_active: true
        cidr: "1.2.3.4/16"
        id: "1"
        label: "Matchmaker"
  Locations:
    type: "object"
    properties:
      locations:
        type: "array"
        items:
          $ref: "#/definitions/Location"
      messages:
        type: "array"
        description: "Extra Messages for the query"
        items:
          type: "string"
    example:
      messages:
      - "messages"
      - "messages"
      locations:
      - continent: "North America"
        country: "Canada"
        administrative_division: "Quebec"
        city: "Montreal"
        timezone: "Eastern Time"
        latitude: 45.332409699999999475039658136665821075439453125
        type: "standard"
        longitude: -73.269362599999993790333974175155162811279296875
        tags:
        - value: "value"
          key: "key"
        - value: "value"
          key: "key"
      - continent: "North America"
        country: "Canada"
        administrative_division: "Quebec"
        city: "Montreal"
        timezone: "Eastern Time"
        latitude: 45.332409699999999475039658136665821075439453125
        type: "standard"
        longitude: -73.269362599999993790333974175155162811279296875
        tags:
        - value: "value"
          key: "key"
        - value: "value"
          key: "key"
  Location:
    type: "object"
    required:
    - "administrative_division"
    - "city"
    - "continent"
    - "country"
    - "latitude"
    - "longitude"
    - "timezone"
    - "type"
    properties:
      city:
        type: "string"
        example: "Montreal"
        description: "City Name"
      continent:
        type: "string"
        example: "North America"
        description: "Continent Name"
      country:
        type: "string"
        example: "Canada"
        description: "Country name"
      timezone:
        type: "string"
        example: "Eastern Time"
        description: "Timezone name"
      administrative_division:
        type: "string"
        example: "Quebec"
        description: "Administrative Division"
      latitude:
        type: "number"
        example: 45.332409699999999475039658136665821075439453125
        description: "The Latitude in decimal"
      longitude:
        type: "number"
        example: -73.269362599999993790333974175155162811279296875
        description: "The Longitude in decimal"
      type:
        type: "string"
        example: "standard"
        description: "The type of location"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
    example:
      continent: "North America"
      country: "Canada"
      administrative_division: "Quebec"
      city: "Montreal"
      timezone: "Eastern Time"
      latitude: 45.332409699999999475039658136665821075439453125
      type: "standard"
      longitude: -73.269362599999993790333974175155162811279296875
      tags:
      - value: "value"
        key: "key"
      - value: "value"
        key: "key"
  Tag:
    type: "object"
    required:
    - "key"
    - "value"
    properties:
      key:
        type: "string"
        description: "Tag's Key"
      value:
        type: "string"
        description: "Tag's Value"
    example:
      value: "value"
      key: "key"
  LocationBeaconList:
    type: "object"
    properties:
      locations:
        type: "array"
        description: "Total number of active location beacons"
        items:
          $ref: "#/definitions/api-model-locationbeacon"
      count:
        type: "integer"
        example: 1
        description: "List of active location beacons"
    example:
      count: 1
      locations:
      - tcp_port: 6
        host: "host"
        udp_port: 0
        location:
          continent: "continent"
          country: "country"
          administrative_division: "administrative_division"
          city: "city"
          timezone: "timezone"
          latitude: 1.46581298050294517310021547018550336360931396484375
          longitude: 5.962133916683182377482808078639209270477294921875
      - tcp_port: 6
        host: "host"
        udp_port: 0
        location:
          continent: "continent"
          country: "country"
          administrative_division: "administrative_division"
          city: "city"
          timezone: "timezone"
          latitude: 1.46581298050294517310021547018550336360931396484375
          longitude: 5.962133916683182377482808078639209270477294921875
  api-model-locationbeacon:
    type: "object"
    required:
    - "host"
    - "location"
    properties:
      host:
        type: "string"
        description: "The URL of the pingable location."
      udp_port:
        type: "integer"
        description: "The open UDP port number for UDP pings, if available."
      tcp_port:
        type: "integer"
        description: "The open TCP port number for TCP pings, if available."
      location:
        $ref: "#/definitions/api-model-location"
    example:
      tcp_port: 6
      host: "host"
      udp_port: 0
      location:
        continent: "continent"
        country: "country"
        administrative_division: "administrative_division"
        city: "city"
        timezone: "timezone"
        latitude: 1.46581298050294517310021547018550336360931396484375
        longitude: 5.962133916683182377482808078639209270477294921875
  api-model-location:
    type: "object"
    required:
    - "administrative_division"
    - "city"
    - "continent"
    - "country"
    - "latitude"
    - "longitude"
    - "timezone"
    properties:
      city:
        type: "string"
        description: "City of the object"
      country:
        type: "string"
        description: "Country of the object"
      continent:
        type: "string"
        description: "Continent of the object"
      administrative_division:
        type: "string"
        description: "Administrative division of the object"
      timezone:
        type: "string"
        description: "Timezone of the object"
      latitude:
        type: "number"
        description: "Latitude of the object"
      longitude:
        type: "number"
        description: "Longitude of the object"
    example:
      continent: "continent"
      country: "country"
      administrative_division: "administrative_division"
      city: "city"
      timezone: "timezone"
      latitude: 1.46581298050294517310021547018550336360931396484375
      longitude: 5.962133916683182377482808078639209270477294921875
  SessionBulkStopPayload:
    type: "object"
    required:
    - "filters"
    properties:
      filters:
        type: "array"
        description: "Filters used to match with sessions"
        items:
          $ref: "#/definitions/SessionBulkStopFiltersPayload"
    example:
      filters:
      - field: "session_id"
        filter_type: "any"
        values:
        - "values"
        - "values"
      - field: "session_id"
        filter_type: "any"
        values:
        - "values"
        - "values"
  SessionBulkStopFiltersPayload:
    type: "object"
    required:
    - "field"
    - "filter_type"
    - "values"
    properties:
      field:
        type: "string"
        example: "session_id"
        description: "The field on which to apply the filter"
        enum:
        - "session_id"
        - "deployment_tags"
        - "request_id"
      values:
        type: "array"
        description: "Values that will be used for the filter"
        items:
          type: "string"
      filter_type:
        type: "string"
        example: "any"
        description: "Types of filter used. Possible values are: ['any', 'all', 'not']"
        enum:
        - "any"
        - "all"
        - "not"
    example:
      field: "session_id"
      filter_type: "any"
      values:
      - "values"
      - "values"
  SessionBulkStopResponse:
    type: "object"
    required:
    - "processable"
    properties:
      processable:
        type: "array"
        description: "A list sessions that can be processed to be stopped"
        items:
          $ref: "#/definitions/SessionStopResponse"
    example:
      processable:
      - session_id: "session_id"
      - session_id: "session_id"
  SessionStopResponse:
    type: "object"
    required:
    - "session_id"
    properties:
      session_id:
        type: "string"
        description: "The id of the request for a deployment"
    example:
      session_id: "session_id"
  SessionDelete:
    type: "object"
    required:
    - "message"
    - "session_id"
    properties:
      message:
        type: "string"
        example: "Instance 93924761ccde will be deleted"
        description: "A message depending of the request termination"
      session_id:
        type: "string"
        example: "abc123-s"
        description: "The Unique Identifier of the Session"
      custom_id:
        type: "string"
        example: "custom-abc123"
        description: "Custom ID if Available"
    example:
      custom_id: "custom-abc123"
      session_id: "abc123-s"
      message: "Instance 93924761ccde will be deleted"
  SessionGet:
    type: "object"
    required:
    - "app_version"
    - "create_time"
    - "elapsed"
    - "kind"
    - "linked"
    - "ready"
    - "session_id"
    - "status"
    - "user_count"
    properties:
      session_id:
        type: "string"
        example: "abc123-s"
        description: "Unique UUID"
      custom_id:
        type: "string"
        example: "custom-abc123"
        description: "Custom ID if Available"
      status:
        type: "string"
        example: "Status.READY"
        description: "Current status of the session"
      ready:
        type: "boolean"
        example: true
        description: "If the session is linked to a ready deployment"
      linked:
        type: "boolean"
        example: true
        description: "If the session is linked to a deployment"
      kind:
        type: "string"
        example: "DEFAULT | SEATS | MATCH"
        description: "Type of session created"
      user_count:
        type: "integer"
        example: 10
        description: "Count of user this session currently have"
      app_version:
        type: "integer"
        description: "App version linked to the session"
      create_time:
        type: "string"
        example: "2024-05-26 12:00:45.831041"
        description: "Session created at"
      elapsed:
        type: "integer"
        description: "Elapsed time"
      error:
        type: "string"
        description: "Error Detail"
      session_users:
        type: "array"
        description: "Users in the session"
        items:
          $ref: "#/definitions/SessionUser"
      session_ips:
        type: "array"
        description: "IPS in the session"
        items:
          $ref: "#/definitions/SessionUser"
      deployment:
        $ref: "#/definitions/Deployment"
      webhook_url:
        type: "string"
        description: "When your Session is Linked, Unprocessable or in Error, we will\
          \ POST the session's details on the webhook_url "
    example:
      app_version: 0
      create_time: "2024-05-26 12:00:45.831041"
      webhook_url: "webhook_url"
      kind: "DEFAULT | SEATS | MATCH"
      custom_id: "custom-abc123"
      session_id: "abc123-s"
      error: "error"
      session_ips:
      - ip: "1.2.3.4"
        latitude: 1.46581298050294517310021547018550336360931396484375
        longitude: 5.962133916683182377482808078639209270477294921875
      - ip: "1.2.3.4"
        latitude: 1.46581298050294517310021547018550336360931396484375
        longitude: 5.962133916683182377482808078639209270477294921875
      session_users:
      - ip: "1.2.3.4"
        latitude: 1.46581298050294517310021547018550336360931396484375
        longitude: 5.962133916683182377482808078639209270477294921875
      - ip: "1.2.3.4"
        latitude: 1.46581298050294517310021547018550336360931396484375
        longitude: 5.962133916683182377482808078639209270477294921875
      elapsed: 6
      user_count: 10
      ready: true
      status: "Status.READY"
      linked: true
      deployment:
        public_ip: "100.10.0.85"
        whitelisting_active: true
        is_joinable_by_session: true
        fqdn: "abc123.test.edgegap.com"
        ready: true
        location:
          continent: "North America"
          country: "Canada"
          administrative_division: "Quebec"
          city: "Montreal"
          timezone: "Eastern Time"
          latitude: 45.5088879999999988967829267494380474090576171875
          longitude: -73.56166799999999739156919531524181365966796875
        sockets: 5
        ports:
          "7777":
            external: 31669
            internal: 7777
            protocol: "UDP"
            name: "7777"
            tls_upgrade: false
            link: "example.com:31669"
            proxy: 65002
          web:
            external: 31587
            internal: 8080
            protocol: "http"
            name: "web"
            tls_upgrade: true
            link: "https://example.com:31587"
            proxy: 65001
        request_id: "abc123"
        status: "Status.READY"
        tags:
        - "production"
        - "production"
        sockets_usage: 2
  SessionUser:
    type: "object"
    required:
    - "ip"
    properties:
      ip:
        type: "string"
        example: "1.2.3.4"
        description: "Ip of the user connected to the Session"
      latitude:
        type: "number"
        description: "Latitude"
      longitude:
        type: "number"
        description: "Longitude"
    example:
      ip: "1.2.3.4"
      latitude: 1.46581298050294517310021547018550336360931396484375
      longitude: 5.962133916683182377482808078639209270477294921875
  SessionModel:
    type: "object"
    required:
    - "app_name"
    properties:
      app_name:
        type: "string"
        description: "The Name of the App you want to deploy, example: \n\n\tsupermario"
      version_name:
        type: "string"
        description: "The Name of the App Version you want to deploy, example: \n\n\
          \tv1.0"
      ip_list:
        type: "array"
        description: "The List of IP of your user, Array of String, example: \n\n\t\
          \ [\"162.254.103.13\",\"198.12.116.39\", \"162.254.135.39\", \"162.254.129.34\"\
          ]"
        items:
          type: "string"
          example: "1.2.3.4"
      geo_ip_list:
        type: "array"
        description: "The list of IP of your user with their location (latitude, longitude)"
        items:
          $ref: "#/definitions/GeoIpListModel"
      deployment_request_id:
        type: "string"
        description: "The request id of your deployment. If specified, the session\
          \ will link to the deployment"
      location:
        description: "If you want to specify a centroid for your session."
        $ref: "#/definitions/LocationModel"
      city:
        type: "string"
        example: "Montreal"
        description: "If you want your session in a specific city"
      country:
        type: "string"
        example: "Canada"
        description: "If you want your session in a specific country"
      continent:
        type: "string"
        example: "North America"
        description: "If you want your session in a specific continent"
      administrative_division:
        type: "string"
        example: "Quebec"
        description: "If you want your session in a specific administrative division"
      region:
        type: "string"
        description: "If you want your session in a specific region"
      selectors:
        type: "array"
        description: "List of Selectors to filter potential Deployment to link and\
          \ tag the Session"
        items:
          $ref: "#/definitions/SelectorModel"
      webhook_url:
        type: "string"
        description: "When your Session is Linked, Unprocessable or in Error, we will\
          \ POST the session's details on the webhook_url "
      filters:
        type: "array"
        description: "List of location filters to apply to the session"
        items:
          $ref: "#/definitions/SessionFilterModel"
      skip_telemetry:
        type: "boolean"
        description: "If system should skip the telemetry and use GeoBase decision\
          \ only"
    example:
      continent: "North America"
      country: "Canada"
      administrative_division: "Quebec"
      webhook_url: "webhook_url"
      city: "Montreal"
      filters:
      - field: "field"
        filter_type: "any"
        values:
        - "values"
        - "values"
      - field: "field"
        filter_type: "any"
        values:
        - "values"
        - "values"
      ip_list:
      - "1.2.3.4"
      - "1.2.3.4"
      selectors:
      - tag_only: false
        tag: "tag"
        env: {}
      - tag_only: false
        tag: "tag"
        env: {}
      skip_telemetry: true
      deployment_request_id: "deployment_request_id"
      app_name: "app_name"
      version_name: "version_name"
      location:
        latitude: 1.46581298050294517310021547018550336360931396484375
        longitude: 5.962133916683182377482808078639209270477294921875
      geo_ip_list:
      - ip: "ip"
        latitude: 0.80082819046101150206595775671303272247314453125
        longitude: 6.02745618307040320615897144307382404804229736328125
      - ip: "ip"
        latitude: 0.80082819046101150206595775671303272247314453125
        longitude: 6.02745618307040320615897144307382404804229736328125
      region: "region"
  SelectorModel:
    type: "object"
    required:
    - "tag"
    properties:
      tag:
        type: "string"
        description: "The Tag to filter potential Deployment with this Selector"
        minLength: 1
        maxLength: 20
      tag_only:
        type: "boolean"
        description: "If True, will not try to filter Deployment and only tag the\
          \ Session"
        default: false
      env:
        $ref: "#/definitions/SelectorModel_env"
    example:
      tag_only: false
      tag: "tag"
      env: {}
  SelectorEnvModel:
    type: "object"
    required:
    - "key"
    - "value"
    properties:
      key:
        type: "string"
        description: "The Key to inject in the Deployment Environment Variable for\
          \ this Selector"
        minLength: 1
        maxLength: 255
      value:
        type: "string"
        description: "The Value to inject in the Deployment Environment Variable for\
          \ this Selector"
        minLength: 1
        maxLength: 1024
  SessionFilterModel:
    type: "object"
    required:
    - "field"
    - "filter_type"
    - "values"
    properties:
      field:
        type: "string"
        description: "The field to filter"
      values:
        type: "array"
        description: "The values to filter"
        items:
          type: "string"
      filter_type:
        type: "string"
        example: "any"
        description: "The type of filter"
        enum:
        - "any"
        - "all"
        - "not"
    example:
      field: "field"
      filter_type: "any"
      values:
      - "values"
      - "values"
  SessionRequest:
    type: "object"
    required:
    - "app"
    - "session_id"
    - "version"
    properties:
      session_id:
        type: "string"
        example: "abc123-s"
        description: "The Unique Identifier of the Session"
      custom_id:
        type: "string"
        example: "custom-abc123"
        description: "Custom ID if Available"
      app:
        type: "string"
        example: "demo"
        description: "The Name of the App you requested"
      version:
        type: "string"
        example: "v1.0"
        description: "The name of the App Version you requested"
      deployment_request_id:
        type: "string"
        description: "Unique UUID"
      selectors:
        type: "array"
        description: "List of Selectors to filter potential Deployment to link and\
          \ tag the Session"
        items:
          $ref: "#/definitions/SelectorModel"
      webhook_url:
        type: "string"
        description: "When your Session is Linked, Unprocessable or in Error, we will\
          \ POST the session's details on the webhook_url "
    example:
      app: "demo"
      deployment_request_id: "deployment_request_id"
      webhook_url: "webhook_url"
      custom_id: "custom-abc123"
      session_id: "abc123-s"
      selectors:
      - tag_only: false
        tag: "tag"
        env: {}
      - tag_only: false
        tag: "tag"
        env: {}
      version: "v1.0"
  PatchSessionModel:
    type: "object"
    required:
    - "ip_list"
    properties:
      ip_list:
        type: "array"
        description: "The List of IP of your user, Array of String, example: \n\n\t\
          \ [\"162.254.103.13\",\"198.12.116.39\", \"162.254.135.39\", \"162.254.129.34\"\
          ]"
        items:
          type: "string"
          example: "1.2.3.4"
    example:
      ip_list:
      - "1.2.3.4"
      - "1.2.3.4"
  SessionUserContext:
    type: "object"
    required:
    - "session_users"
    properties:
      session_users:
        type: "array"
        description: "Users in the session"
        items:
          $ref: "#/definitions/SessionUser"
    example:
      session_users:
      - ip: "1.2.3.4"
        latitude: 1.46581298050294517310021547018550336360931396484375
        longitude: 5.962133916683182377482808078639209270477294921875
      - ip: "1.2.3.4"
        latitude: 1.46581298050294517310021547018550336360931396484375
        longitude: 5.962133916683182377482808078639209270477294921875
  Sessions:
    type: "object"
    properties:
      data:
        type: "array"
        description: "List of Active Sessions"
        items:
          $ref: "#/definitions/SessionContext"
      total_count:
        type: "integer"
        description: "Total Session in the Database"
      pagination:
        description: "Pagination Object"
        $ref: "#/definitions/Pagination"
    example:
      pagination:
        number: 6
        has_previous: true
        next_page_number: 1
        has_next: true
        paginator:
          num_pages: 5
        previous_page_number: 5
      data:
      - deployment_request_id: "abc123"
        user_count: 10
        webhook_url: "webhook_url"
        ready: true
        kind: "DEFAULT | SEATS | MATCH"
        custom_id: "custom-abc123"
        session_id: "abc123-s"
        status: "Status.READY"
        linked: true
      - deployment_request_id: "abc123"
        user_count: 10
        webhook_url: "webhook_url"
        ready: true
        kind: "DEFAULT | SEATS | MATCH"
        custom_id: "custom-abc123"
        session_id: "abc123-s"
        status: "Status.READY"
        linked: true
      total_count: 0
  SessionContext:
    type: "object"
    required:
    - "kind"
    - "linked"
    - "ready"
    - "session_id"
    - "status"
    - "user_count"
    properties:
      session_id:
        type: "string"
        example: "abc123-s"
        description: "Unique UUID"
      custom_id:
        type: "string"
        example: "custom-abc123"
        description: "Custom ID if Available"
      status:
        type: "string"
        example: "Status.READY"
        description: "Current status of the session"
      ready:
        type: "boolean"
        example: true
        description: "If the session is linked to a Ready deployment"
      linked:
        type: "boolean"
        example: true
        description: "If the session is linked to a deployment"
      kind:
        type: "string"
        example: "DEFAULT | SEATS | MATCH"
        description: "Type of session created"
      user_count:
        type: "integer"
        example: 10
        description: "Count of user this session currently have"
      deployment_request_id:
        type: "string"
        example: "abc123"
        description: "Unique UUID"
      webhook_url:
        type: "string"
        description: "When your Session is Linked, Unprocessable or in Error, we will\
          \ POST the session's details on the webhook_url "
    example:
      deployment_request_id: "abc123"
      user_count: 10
      webhook_url: "webhook_url"
      ready: true
      kind: "DEFAULT | SEATS | MATCH"
      custom_id: "custom-abc123"
      session_id: "abc123-s"
      status: "Status.READY"
      linked: true
  MetricsResponse:
    type: "object"
    properties:
      total:
        $ref: "#/definitions/TotalMetricsModel"
      cpu:
        $ref: "#/definitions/MetricsModel"
      mem:
        $ref: "#/definitions/MetricsModel"
      network:
        $ref: "#/definitions/NetworkMetricsModel"
    example:
      total:
        disk_write_total:
          timestamps:
          - "2021-07-14 14:17:37.711"
          - "2021-07-14 14:17:37.711"
          datasets:
          - 2458
          - 2458
          labels:
          - "00:00:00"
          - "00:00:00"
        receive_total:
          timestamps:
          - "2021-07-14 14:17:37.711"
          - "2021-07-14 14:17:37.711"
          datasets:
          - 2458
          - 2458
          labels:
          - "00:00:00"
          - "00:00:00"
        transmit_total:
          timestamps:
          - "2021-07-14 14:17:37.711"
          - "2021-07-14 14:17:37.711"
          datasets:
          - 2458
          - 2458
          labels:
          - "00:00:00"
          - "00:00:00"
        disk_read_total:
          timestamps:
          - "2021-07-14 14:17:37.711"
          - "2021-07-14 14:17:37.711"
          datasets:
          - 2458
          - 2458
          labels:
          - "00:00:00"
          - "00:00:00"
      mem:
        timestamps:
        - "2021-07-14 14:17:37.711"
        - "2021-07-14 14:17:37.711"
        datasets:
        - 2458
        - 2458
        labels:
        - "00:00:00"
        - "00:00:00"
      cpu:
        timestamps:
        - "2021-07-14 14:17:37.711"
        - "2021-07-14 14:17:37.711"
        datasets:
        - 2458
        - 2458
        labels:
        - "00:00:00"
        - "00:00:00"
      network:
        receive:
          timestamps:
          - "2021-07-14 14:17:37.711"
          - "2021-07-14 14:17:37.711"
          datasets:
          - 2458
          - 2458
          labels:
          - "00:00:00"
          - "00:00:00"
        transmit:
          timestamps:
          - "2021-07-14 14:17:37.711"
          - "2021-07-14 14:17:37.711"
          datasets:
          - 2458
          - 2458
          labels:
          - "00:00:00"
          - "00:00:00"
  TotalMetricsModel:
    type: "object"
    properties:
      receive_total:
        $ref: "#/definitions/MetricsModel"
      transmit_total:
        $ref: "#/definitions/MetricsModel"
      disk_read_total:
        $ref: "#/definitions/MetricsModel"
      disk_write_total:
        $ref: "#/definitions/MetricsModel"
    example:
      disk_write_total:
        timestamps:
        - "2021-07-14 14:17:37.711"
        - "2021-07-14 14:17:37.711"
        datasets:
        - 2458
        - 2458
        labels:
        - "00:00:00"
        - "00:00:00"
      receive_total:
        timestamps:
        - "2021-07-14 14:17:37.711"
        - "2021-07-14 14:17:37.711"
        datasets:
        - 2458
        - 2458
        labels:
        - "00:00:00"
        - "00:00:00"
      transmit_total:
        timestamps:
        - "2021-07-14 14:17:37.711"
        - "2021-07-14 14:17:37.711"
        datasets:
        - 2458
        - 2458
        labels:
        - "00:00:00"
        - "00:00:00"
      disk_read_total:
        timestamps:
        - "2021-07-14 14:17:37.711"
        - "2021-07-14 14:17:37.711"
        datasets:
        - 2458
        - 2458
        labels:
        - "00:00:00"
        - "00:00:00"
  MetricsModel:
    type: "object"
    properties:
      labels:
        type: "array"
        items:
          type: "string"
          example: "00:00:00"
      datasets:
        type: "array"
        items:
          type: "number"
          example: 2458
      timestamps:
        type: "array"
        items:
          type: "string"
          format: "date"
          example: "2021-07-14 14:17:37.711"
    example:
      timestamps:
      - "2021-07-14 14:17:37.711"
      - "2021-07-14 14:17:37.711"
      datasets:
      - 2458
      - 2458
      labels:
      - "00:00:00"
      - "00:00:00"
  NetworkMetricsModel:
    type: "object"
    properties:
      receive:
        $ref: "#/definitions/MetricsModel"
      transmit:
        $ref: "#/definitions/MetricsModel"
    example:
      receive:
        timestamps:
        - "2021-07-14 14:17:37.711"
        - "2021-07-14 14:17:37.711"
        datasets:
        - 2458
        - 2458
        labels:
        - "00:00:00"
        - "00:00:00"
      transmit:
        timestamps:
        - "2021-07-14 14:17:37.711"
        - "2021-07-14 14:17:37.711"
        datasets:
        - 2458
        - 2458
        labels:
        - "00:00:00"
        - "00:00:00"
  CustomSessionModel:
    type: "object"
    required:
    - "ip_list"
    properties:
      ip_list:
        type: "array"
        description: "The List of IP of your user, Array of String, example: \n\n\t\
          \ [\"162.254.103.13\",\"198.12.116.39\", \"162.254.135.39\", \"162.254.129.34\"\
          ]"
        items:
          type: "string"
          example: "1.2.3.4"
      webhook_url:
        type: "string"
        description: "When your Session is Linked, Unprocessable or in Error, we will\
          \ POST the session's details on the webhook_url "
    example:
      webhook_url: "webhook_url"
      ip_list:
      - "1.2.3.4"
      - "1.2.3.4"
  CustomSessionDeleteModel:
    type: "object"
    required:
    - "sessions"
    properties:
      sessions:
        type: "array"
        description: "List of Custom IDs to Delete"
        items:
          type: "string"
          example: "custom-abc123"
    example:
      sessions:
      - "custom-abc123"
      - "custom-abc123"
  CustomBulkSessionsModel:
    type: "object"
    properties:
      sessions:
        type: "array"
        items:
          $ref: "#/definitions/CustomBulkSessionModel"
    example:
      sessions:
      - webhook_url: "webhook_url"
        custom_id: "custom_id"
        ip_list:
        - "1.2.3.4"
        - "1.2.3.4"
      - webhook_url: "webhook_url"
        custom_id: "custom_id"
        ip_list:
        - "1.2.3.4"
        - "1.2.3.4"
  CustomBulkSessionModel:
    type: "object"
    required:
    - "custom_id"
    - "ip_list"
    properties:
      custom_id:
        type: "string"
        description: "Custom Session ID"
      ip_list:
        type: "array"
        description: "The List of IP of your user, Array of String, example: \n\n\t\
          \ [\"162.254.103.13\",\"198.12.116.39\", \"162.254.135.39\", \"162.254.129.34\"\
          ]"
        items:
          type: "string"
          example: "1.2.3.4"
      webhook_url:
        type: "string"
        description: "When your Session is Linked, Unprocessable or in Error, we will\
          \ POST the session's details on the webhook_url "
    example:
      webhook_url: "webhook_url"
      custom_id: "custom_id"
      ip_list:
      - "1.2.3.4"
      - "1.2.3.4"
  BulkSessionDelete:
    type: "object"
    required:
    - "errors"
    - "sessions"
    properties:
      sessions:
        type: "array"
        description: "List of Delete"
        items:
          $ref: "#/definitions/SessionDelete"
      errors:
        type: "array"
        description: "List of Delete Errors"
        items:
          type: "string"
    example:
      sessions:
      - custom_id: "custom-abc123"
        session_id: "abc123-s"
        message: "Instance 93924761ccde will be deleted"
      - custom_id: "custom-abc123"
        session_id: "abc123-s"
        message: "Instance 93924761ccde will be deleted"
      errors:
      - "errors"
      - "errors"
  BulkSessionPost:
    type: "object"
    required:
    - "errors"
    - "sessions"
    properties:
      sessions:
        type: "array"
        description: "List of Creation Reply"
        items:
          $ref: "#/definitions/SessionRequest"
      errors:
        type: "array"
        description: "List of Creation Errors Reply"
        items:
          type: "string"
    example:
      sessions:
      - app: "demo"
        deployment_request_id: "deployment_request_id"
        webhook_url: "webhook_url"
        custom_id: "custom-abc123"
        session_id: "abc123-s"
        selectors:
        - tag_only: false
          tag: "tag"
          env: {}
        - tag_only: false
          tag: "tag"
          env: {}
        version: "v1.0"
      - app: "demo"
        deployment_request_id: "deployment_request_id"
        webhook_url: "webhook_url"
        custom_id: "custom-abc123"
        session_id: "abc123-s"
        selectors:
        - tag_only: false
          tag: "tag"
          env: {}
        - tag_only: false
          tag: "tag"
          env: {}
        version: "v1.0"
      errors:
      - "errors"
      - "errors"
  MatchmakerListResponse:
    type: "object"
    required:
    - "count"
    - "data"
    properties:
      count:
        type: "integer"
        description: "Number of matchmakers owned by the user."
      data:
        type: "array"
        items:
          description: "List of the user's matchmakers."
          $ref: "#/definitions/MatchmakerResponse"
    example:
      data:
      - ""
      - ""
      count: 0
  MatchmakerResponse:
    allOf:
    - $ref: "#/definitions/BaseModel"
    - type: "object"
      required:
      - "name"
      properties:
        name:
          type: "string"
          description: "Name of the Matchmaker."
  BaseModel:
    type: "object"
    required:
    - "created_at"
    - "updated_at"
    properties:
      created_at:
        type: "string"
        example: "2024-05-26 12:00:45.831041"
      updated_at:
        type: "string"
        example: "2024-05-26 12:00:45.831041"
  MatchmakerUpdate:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the Matchmaker."
    example:
      name: "name"
  MatchmakerCreate:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of the Matchmaker."
    example:
      name: "name"
  MatchmakerComponentListResponse:
    type: "object"
    required:
    - "count"
    - "data"
    properties:
      count:
        type: "integer"
        description: "Number of matchmaker components owned by the user."
      data:
        description: "List of the user's matchmaker components."
        $ref: "#/definitions/MatchmakerComponentResponse"
    example:
      data: ""
      count: 0
  MatchmakerComponentResponse:
    allOf:
    - $ref: "#/definitions/BaseModel"
    - type: "object"
      required:
      - "credentials"
      - "image"
      - "name"
      - "repository"
      - "tag"
      properties:
        name:
          type: "string"
          description: "Matchmaker component name. Must be unique."
        repository:
          type: "string"
          description: "Container repository where the component's image is hosted."
        image:
          type: "string"
          description: "Container image to use for this component."
        tag:
          type: "string"
          description: "Tag of the container image to use for this component."
        credentials:
          $ref: "#/definitions/MatchmakerComponentResponse_credentials"
  ComponentCredentials:
    type: "object"
    required:
    - "token"
    - "username"
    properties:
      username:
        type: "string"
        description: "Username for the component's private repository."
      token:
        type: "string"
        description: "Password (token) of the component's private repository."
  MatchmakerComponentUpdate:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Matchmaker component name. Must be unique."
      repository:
        type: "string"
        description: "Container repository where the component's image is hosted."
      image:
        type: "string"
        description: "Container image to use for this component."
      tag:
        type: "string"
        description: "Tag of the container image to use for this component."
      credentials:
        $ref: "#/definitions/MatchmakerComponentResponse_credentials"
    example:
      image: "image"
      credentials: {}
      name: "name"
      tag: "tag"
      repository: "repository"
  MatchmakerComponentCreate:
    type: "object"
    required:
    - "image"
    - "name"
    - "repository"
    - "tag"
    properties:
      name:
        type: "string"
        description: "Matchmaker component name. Must be unique."
      repository:
        type: "string"
        description: "Container repository where the component's image is hosted."
      image:
        type: "string"
        description: "Container image to use for this component."
      tag:
        type: "string"
        description: "Tag of the container image to use for this component."
      credentials:
        $ref: "#/definitions/MatchmakerComponentResponse_credentials"
    example:
      image: "image"
      credentials: {}
      name: "name"
      tag: "tag"
      repository: "repository"
  MatchmakerComponentEnvListResponse:
    type: "object"
    required:
    - "count"
    properties:
      count:
        type: "integer"
        description: "Number of matchmaker component envs for the component."
      data:
        type: "array"
        items:
          description: "List of the matchmaker component's envs."
          $ref: "#/definitions/MatchmakerComponentEnvsResponse"
    example:
      data:
      - ""
      - ""
      count: 0
  MatchmakerComponentEnvsResponse:
    allOf:
    - $ref: "#/definitions/BaseModel"
    - type: "object"
      required:
      - "key"
      - "value"
      properties:
        key:
          type: "string"
          description: "Name of the ENV variable."
        value:
          type: "string"
          description: "Value of the ENV variable."
  MatchmakerComponentEnvsUpdate:
    type: "object"
    properties:
      key:
        type: "string"
        description: "Name of the ENV variable."
      value:
        type: "string"
        description: "Value of the ENV variable."
    example:
      value: "value"
      key: "key"
  MatchmakerComponentEnvsCreate:
    type: "object"
    required:
    - "key"
    - "value"
    properties:
      key:
        type: "string"
        description: "Name of the ENV variable."
      value:
        type: "string"
        description: "Value of the ENV variable."
    example:
      value: "value"
      key: "key"
  MatchmakerManagedReleaseUpdate:
    allOf:
    - $ref: "#/definitions/MatchmakerReleaseUpdateBase"
    - type: "object"
      properties:
        release_config_name:
          type: "string"
          description: "Name of the matchmaker release configuration to use for this\
            \ managed release."
  MatchmakerReleaseUpdateBase:
    type: "object"
    properties:
      version:
        type: "string"
        description: "Name of the matchmaker release. Should be unique, and will be\
          \ used to differentiate your releases."
  MatchmakerManagedReleaseResponse:
    allOf:
    - $ref: "#/definitions/MatchmakerReleaseResponseBase"
    - type: "object"
      required:
      - "release_config_name"
      properties:
        release_config_name:
          type: "string"
          description: "Name of the matchmaker release configuration to use for this\
            \ managed release."
  MatchmakerReleaseResponseBase:
    allOf:
    - $ref: "#/definitions/BaseModel"
    - type: "object"
      required:
      - "app_name"
      - "version"
      - "version_name"
      properties:
        app_name:
          type: "string"
          description: "Name of the app to deploy using the matchmaker."
        version_name:
          type: "string"
          description: "Name of the version of the specified app to deploy using the\
            \ matchmaker."
        version:
          type: "string"
          description: "Name of the matchmaker release. Should be unique, and will\
            \ be used to differentiate your releases."
  MatchmakerManagedReleaseCreate:
    allOf:
    - $ref: "#/definitions/MatchmakerReleaseCreateBase"
    - type: "object"
      required:
      - "release_config_name"
      properties:
        release_config_name:
          type: "string"
          description: "Name of the matchmaker release configuration to use for this\
            \ managed release."
  MatchmakerReleaseCreateBase:
    type: "object"
    required:
    - "version"
    properties:
      version:
        type: "string"
        description: "Name of the matchmaker release. Should be unique, and will be\
          \ used to differentiate your releases."
  MatchmakerReleaseUpdate:
    allOf:
    - $ref: "#/definitions/MatchmakerReleaseUpdateBase"
    - type: "object"
      properties:
        frontend_component_name:
          type: "string"
          description: "Name of the matchmaker component to use as the Open Match\
            \ frontend."
        director_component_name:
          type: "string"
          description: "Name of the matchmaker component to use as the Open Match\
            \ director."
        match_function_component_name:
          type: "string"
          description: "Name of the matchmaker component to use as the Open Match\
            \ match function."
  MatchmakerReleaseResponse:
    allOf:
    - $ref: "#/definitions/MatchmakerReleaseResponseBase"
    - type: "object"
      required:
      - "director_component_name"
      - "frontend_component_name"
      - "match_function_component_name"
      properties:
        frontend_component_name:
          type: "string"
          description: "Name of the matchmaker component to use as the Open Match\
            \ frontend."
        director_component_name:
          type: "string"
          description: "Name of the matchmaker component to use as the Open Match\
            \ director."
        match_function_component_name:
          type: "string"
          description: "Name of the matchmaker component to use as the Open Match\
            \ match function."
  MatchmakerReleaseCreate:
    allOf:
    - $ref: "#/definitions/MatchmakerReleaseCreateBase"
    - type: "object"
      required:
      - "director_component_name"
      - "frontend_component_name"
      - "match_function_component_name"
      properties:
        frontend_component_name:
          type: "string"
          description: "Name of the matchmaker component to use as the Open Match\
            \ frontend."
        director_component_name:
          type: "string"
          description: "Name of the matchmaker component to use as the Open Match\
            \ director."
        match_function_component_name:
          type: "string"
          description: "Name of the matchmaker component to use as the Open Match\
            \ match function."
  MatchmakerReleaseConfigUpdate:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Matchmaker configuration name. Must be unique."
      configuration:
        type: "string"
        description: "Matchmaker configuration, parsed as a string."
    example:
      configuration: "configuration"
      name: "name"
  MatchmakerReleaseConfigResponse:
    allOf:
    - $ref: "#/definitions/BaseModel"
    - type: "object"
      required:
      - "configuration"
      - "name"
      properties:
        name:
          type: "string"
          description: "Matchmaker configuration name. Must be unique."
        configuration:
          type: "string"
          description: "Matchmaker configuration, parsed as a string."
  MatchmakerReleaseConfigCreate:
    type: "object"
    required:
    - "configuration"
    - "name"
    properties:
      name:
        type: "string"
        description: "Matchmaker configuration name. Must be unique."
      configuration:
        type: "string"
        description: "Matchmaker configuration, parsed as a string."
    example:
      configuration: "configuration"
      name: "name"
  ActiveDeploymentTelemetryRequest:
    type: "object"
    required:
    - "deployments"
    - "ips"
    properties:
      deployments:
        type: "array"
        description: "List of Deployment request ID to get telemetry."
        items:
          type: "string"
      ips:
        type: "array"
        items:
          type: "string"
          example: "1.1.1.1"
      webhook_url:
        type: "string"
        description: "Webhook URL that we should call to send the telemetry response\
          \ back."
    example:
      deployments:
      - "deployments"
      - "deployments"
      webhook_url: "webhook_url"
      ips:
      - "1.1.1.1"
      - "1.1.1.1"
  ActiveDeploymentTelemetryResponse:
    type: "object"
    required:
    - "expire"
    - "retrieval_key"
    properties:
      retrieval_key:
        type: "string"
        description: "Unique retrieval key to get the telemetry response."
      expire:
        type: "string"
        example: "2024-05-26 12:00:45.831041"
        description: "Expiration date of the retrieval key."
    example:
      retrieval_key: "retrieval_key"
      expire: "2024-05-26 12:00:45.831041"
  ActiveDeploymentTelemetryGetResult:
    type: "object"
    required:
    - "partial_result"
    - "retrieval_key"
    - "scores"
    properties:
      retrieval_key:
        type: "string"
        description: "Unique retrieval key to get the telemetry response."
      scores:
        type: "array"
        description: "Result sorted by best score. Index 0 is the best one."
        items:
          $ref: "#/definitions/ActiveDeploymentTelemetryScore"
      partial_result:
        type: "boolean"
        description: "If the score list is incomplete and missing request IDs. Can\
          \ occur if you request the results before we receive telemetry from every\
          \ deployment."
    example:
      retrieval_key: "retrieval_key"
      scores:
      - request_id: "request_id"
      - request_id: "request_id"
      partial_result: true
  ActiveDeploymentTelemetryScore:
    type: "object"
    required:
    - "request_id"
    properties:
      request_id:
        type: "string"
        description: "The request ID of the tested deployment"
    example:
      request_id: "request_id"
  IPAddressResponse:
    type: "object"
    required:
    - "public_ip"
    properties:
      public_ip:
        type: "string"
        example: "174.91.204.75"
        description: "Public IP Address"
    example:
      public_ip: "174.91.204.75"
  IPAddressLookupResponse:
    type: "object"
    required:
    - "ip_address"
    properties:
      type:
        type: "string"
        example: "ipv4"
        description: "IP address type"
      ip_address:
        type: "string"
        example: "1.1.1.1"
        description: "IP address"
      location:
        $ref: "#/definitions/IPAddressLookupLocation"
    example:
      location:
        continent:
          code: "AF"
          name: "Africa"
        country:
          code: "CA"
          name: "Canada"
        latitude: 45.42150000000000176214598468504846096038818359375
        longitude: -75.6971999999999951569407130591571331024169921875
      ip_address: "1.1.1.1"
      type: "ipv4"
  IPAddressLookupLocation:
    type: "object"
    properties:
      continent:
        $ref: "#/definitions/IPAddressLookupLocationContinent"
      country:
        $ref: "#/definitions/IPAddressLookupLocationCountry"
      latitude:
        type: "number"
        example: 45.42150000000000176214598468504846096038818359375
        description: "Latitude"
      longitude:
        type: "number"
        example: -75.6971999999999951569407130591571331024169921875
        description: "Longitude"
    example:
      continent:
        code: "AF"
        name: "Africa"
      country:
        code: "CA"
        name: "Canada"
      latitude: 45.42150000000000176214598468504846096038818359375
      longitude: -75.6971999999999951569407130591571331024169921875
  IPAddressLookupLocationContinent:
    type: "object"
    properties:
      code:
        type: "string"
        example: "AF"
        description: "Continent code"
      name:
        type: "string"
        example: "Africa"
        description: "Continent name"
    example:
      code: "AF"
      name: "Africa"
  IPAddressLookupLocationCountry:
    type: "object"
    properties:
      code:
        type: "string"
        example: "CA"
        description: "Country code"
      name:
        type: "string"
        example: "Canada"
        description: "Country name"
    example:
      code: "CA"
      name: "Canada"
  IPAddressesLookupPayload:
    type: "object"
    required:
    - "addresses"
    properties:
      addresses:
        type: "array"
        description: "IP Addresses"
        items:
          type: "string"
  IPAddressesLookupResponse:
    type: "object"
    required:
    - "addresses"
    properties:
      addresses:
        type: "array"
        description: "IP Addresses"
        items:
          $ref: "#/definitions/IPAddressLookupResponse"
    example:
      addresses:
      - location:
          continent:
            code: "AF"
            name: "Africa"
          country:
            code: "CA"
            name: "Canada"
          latitude: 45.42150000000000176214598468504846096038818359375
          longitude: -75.6971999999999951569407130591571331024169921875
        ip_address: "1.1.1.1"
        type: "ipv4"
      - location:
          continent:
            code: "AF"
            name: "Africa"
          country:
            code: "CA"
            name: "Canada"
          latitude: 45.42150000000000176214598468504846096038818359375
          longitude: -75.6971999999999951569407130591571331024169921875
        ip_address: "1.1.1.1"
        type: "ipv4"
  FleetPoliciesGetResponse:
    type: "object"
    required:
    - "data"
    - "enabled"
    - "maximum"
    - "minimum"
    - "name"
    - "threshold"
    - "type"
    properties:
      name:
        type: "string"
        description: "Name of the Policy"
      enabled:
        type: "boolean"
        example: true
        description: "If the Policy is enabled. Defaults to true."
      type:
        type: "string"
        example: "Location"
        description: "Type of the Policy. See our documentation for more information\
          \ on the type and it's data."
        enum:
        - "Location"
        - "Tag"
        - "Coordinates"
      minimum:
        type: "integer"
        example: 1
        description: "Minimum deployments at all time"
        minimum: 1
      maximum:
        type: "integer"
        example: 1
        description: "Maximum deployments for the provided type."
        minimum: 1
      threshold:
        type: "number"
        description: "Based on the number of sockets connected, how filled should\
          \ a session deployment be before initiating a scale-up deployment. Float\
          \ between 0.1 and 1."
        minimum: 0.1
        maximum: 1
      data:
        type: "object"
        example:
          filters:
          - field: "city"
            values:
            - "string"
            filter_type: "any"
        description: "JSON object for your filters. See our documentation for more\
          \ information."
        properties: {}
      create_time:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of policy creation"
      last_updated:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of policy last update"
    example:
      last_updated: "2022-01-01 00:00:00.000000"
      data:
        filters:
        - field: "city"
          values:
          - "string"
          filter_type: "any"
      create_time: "2022-01-01 00:00:00.000000"
      name: "name"
      maximum: 1
      threshold: 0.1720745371414910407370513212299556471407413482666015625
      type: "Location"
      minimum: 1
      enabled: true
  HorizontalScalerConstraintList:
    type: "object"
    properties:
      policies:
        type: "array"
        items:
          $ref: "#/definitions/FleetPoliciesGetResponse"
      pagination:
        description: "Pagination Object"
        $ref: "#/definitions/Pagination"
    example:
      pagination:
        number: 6
        has_previous: true
        next_page_number: 1
        has_next: true
        paginator:
          num_pages: 5
        previous_page_number: 5
      policies:
      - last_updated: "2022-01-01 00:00:00.000000"
        data:
          filters:
          - field: "city"
            values:
            - "string"
            filter_type: "any"
        create_time: "2022-01-01 00:00:00.000000"
        name: "name"
        maximum: 1
        threshold: 0.1720745371414910407370513212299556471407413482666015625
        type: "Location"
        minimum: 1
        enabled: true
      - last_updated: "2022-01-01 00:00:00.000000"
        data:
          filters:
          - field: "city"
            values:
            - "string"
            filter_type: "any"
        create_time: "2022-01-01 00:00:00.000000"
        name: "name"
        maximum: 1
        threshold: 0.1720745371414910407370513212299556471407413482666015625
        type: "Location"
        minimum: 1
        enabled: true
  FleetPoliciesPatchPayload:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the Policy"
      enabled:
        type: "boolean"
        example: true
        description: "If the Policy is enabled. Defaults to true."
      type:
        type: "string"
        example: "Location"
        description: "Type of the Policy. See our documentation for more information\
          \ on the type and it's data."
        enum:
        - "Location"
        - "Tag"
        - "Coordinates"
      minimum:
        type: "integer"
        example: 1
        description: "Minimum deployments at all time"
        minimum: 0
      maximum:
        type: "integer"
        example: 1
        description: "Maximum deployments for the provided type."
        minimum: 1
      threshold:
        type: "number"
        example: 0.90000000000000002220446049250313080847263336181640625
        description: "Based on the number of sockets connected, how filled should\
          \ a session deployment be before initiating a scale-up deployment. Float\
          \ between 0.1 and 1."
        minimum: 0.1
        maximum: 1
      data:
        type: "object"
        example:
          filters:
          - field: "city"
            values:
            - "string"
            filter_type: "any"
        description: "JSON object for your filters. See our documentation for more\
          \ information."
        properties: {}
      create_time:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of policy creation"
      last_updated:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of policy last update"
    example:
      last_updated: "2022-01-01 00:00:00.000000"
      data:
        filters:
        - field: "city"
          values:
          - "string"
          filter_type: "any"
      create_time: "2022-01-01 00:00:00.000000"
      name: "name"
      maximum: 1
      threshold: 0.90000000000000002220446049250313080847263336181640625
      type: "Location"
      minimum: 1
      enabled: true
  FleetPoliciesPostPayload:
    type: "object"
    required:
    - "data"
    - "enabled"
    - "maximum"
    - "minimum"
    - "name"
    - "threshold"
    - "type"
    properties:
      name:
        type: "string"
        description: "Name of the Policy"
      enabled:
        type: "boolean"
        example: true
        description: "If the Policy is enabled. Defaults to true."
      type:
        type: "string"
        example: "Location"
        description: "Type of the Policy. See our documentation for more information\
          \ on the type and it's data."
        enum:
        - "Location"
        - "Tag"
        - "Coordinates"
      minimum:
        type: "integer"
        example: 1
        description: "Minimum deployments at all time"
        minimum: 1
      maximum:
        type: "integer"
        example: 1
        description: "Maximum deployments for the provided type."
        minimum: 1
      threshold:
        type: "number"
        description: "Based on the number of sockets connected, how filled should\
          \ a session deployment be before initiating a scale-up deployment. Float\
          \ between 0.1 and 1."
        minimum: 0.1
        maximum: 1
      data:
        type: "object"
        example:
          filters:
          - field: "city"
            values:
            - "string"
            filter_type: "any"
        description: "JSON object for your filters. See our documentation for more\
          \ information."
        properties: {}
    example:
      data:
        filters:
        - field: "city"
          values:
          - "string"
          filter_type: "any"
      name: "name"
      maximum: 1
      threshold: 0.1720745371414910407370513212299556471407413482666015625
      type: "Location"
      minimum: 1
      enabled: true
  FleetPoliciesPostResponse:
    type: "object"
    required:
    - "data"
    - "enabled"
    - "maximum"
    - "minimum"
    - "name"
    - "threshold"
    - "type"
    properties:
      name:
        type: "string"
        description: "Name of the Policy"
      enabled:
        type: "boolean"
        example: true
        description: "If the Policy is enabled. Defaults to true."
      type:
        type: "string"
        example: "Location"
        description: "Type of the Policy. See our documentation for more information\
          \ on the type and it's data."
        enum:
        - "Location"
        - "Tag"
        - "Coordinates"
      minimum:
        type: "integer"
        example: 1
        description: "Minimum deployments at all time"
        minimum: 1
      maximum:
        type: "integer"
        example: 1
        description: "Maximum deployments for the provided type."
        minimum: 1
      threshold:
        type: "number"
        description: "Based on the number of sockets connected, how filled should\
          \ a session deployment be before initiating a scale-up deployment. Float\
          \ between 0.1 and 1."
        minimum: 0.1
        maximum: 1
      data:
        type: "object"
        example:
          filters:
          - field: "city"
            values:
            - "string"
            filter_type: "any"
        description: "JSON object for your filters. See our documentation for more\
          \ information."
        properties: {}
      create_time:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of policy creation"
      last_updated:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of policy last update"
    example:
      last_updated: "2022-01-01 00:00:00.000000"
      data:
        filters:
        - field: "city"
          values:
          - "string"
          filter_type: "any"
      create_time: "2022-01-01 00:00:00.000000"
      name: "name"
      maximum: 1
      threshold: 0.1720745371414910407370513212299556471407413482666015625
      type: "Location"
      minimum: 1
      enabled: true
  FleetDeleteResponse:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        description: "Success Message"
    example:
      message: "message"
  FleetGetResponse:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of the Fleet"
      enabled:
        type: "boolean"
        description: "If the Fleet is enabled. Defaults to false."
        default: false
      create_time:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of fleet creation"
      last_updated:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of fleet last update"
    example:
      last_updated: "2022-01-01 00:00:00.000000"
      create_time: "2022-01-01 00:00:00.000000"
      name: "name"
      enabled: false
  HorizontalScalerAppVersionLink:
    type: "object"
    required:
    - "app"
    - "app_version"
    - "fleet"
    properties:
      app:
        type: "string"
        description: "Name of the linked app of the linked version"
      app_version:
        type: "string"
        description: "Name of the linked app version."
      fleet:
        type: "string"
        description: "Name of the fleet the app version is linked to."
      create_time:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of link creation"
      last_updated:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of link last update"
    example:
      app: "app"
      fleet: "fleet"
      last_updated: "2022-01-01 00:00:00.000000"
      app_version: "app_version"
      create_time: "2022-01-01 00:00:00.000000"
  FleetList:
    type: "object"
    properties:
      fleets:
        type: "array"
        description: "List of Fleets"
        items:
          $ref: "#/definitions/FleetGetResponse"
      pagination:
        description: "Pagination Object"
        $ref: "#/definitions/Pagination"
    example:
      pagination:
        number: 6
        has_previous: true
        next_page_number: 1
        has_next: true
        paginator:
          num_pages: 5
        previous_page_number: 5
      fleets:
      - last_updated: "2022-01-01 00:00:00.000000"
        create_time: "2022-01-01 00:00:00.000000"
        name: "name"
        enabled: false
      - last_updated: "2022-01-01 00:00:00.000000"
        create_time: "2022-01-01 00:00:00.000000"
        name: "name"
        enabled: false
  FleetPatchPayload:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the Fleet"
      enabled:
        type: "boolean"
        description: "If the Fleet is enabled"
    example:
      name: "name"
      enabled: true
  FleetPatchResponse:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the Fleet"
      enabled:
        type: "boolean"
        description: "If the Fleet is enabled"
      create_time:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of fleet creation"
      last_updated:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of fleet last update"
    example:
      last_updated: "2022-01-01 00:00:00.000000"
      create_time: "2022-01-01 00:00:00.000000"
      name: "name"
      enabled: true
  FleetPostPayload:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of the Fleet"
      enabled:
        type: "boolean"
        description: "If the Fleet is enabled. Defaults to false."
        default: false
    example:
      name: "name"
      enabled: false
  FleetPostResponse:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of the Fleet"
      enabled:
        type: "boolean"
        description: "If the Fleet is enabled. Defaults to false."
        default: false
      create_time:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of fleet creation"
      last_updated:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of fleet last update"
    example:
      last_updated: "2022-01-01 00:00:00.000000"
      create_time: "2022-01-01 00:00:00.000000"
      name: "name"
      enabled: false
  EndpointStorageDeleteResponse:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        description: "Success Message"
    example:
      message: "message"
  EndpointStorageGetResponse:
    type: "object"
    required:
    - "access_key_id"
    - "bucket"
    - "endpoint"
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of the Endpoint Storage"
      access_key_id:
        type: "string"
        description: "Your access key ID to connect to your S3 Bucket."
      endpoint:
        type: "string"
        example: "https://us-east-1.your-s3-provider.com"
        description: "Full URL to your S3 Bucket with https or http. It's recommended\
          \ to not include your bucket name as a subdomain"
      bucket:
        type: "string"
        description: "Your secret access key to connect to your S3 Bucket. Will be\
          \ encrypted."
      create_time:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of endpoint storage creation"
      last_updated:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of endpoint storage last update"
    example:
      access_key_id: "access_key_id"
      bucket: "bucket"
      endpoint: "https://us-east-1.your-s3-provider.com"
      last_updated: "2022-01-01 00:00:00.000000"
      create_time: "2022-01-01 00:00:00.000000"
      name: "name"
  EndpointStorageListResponse:
    type: "object"
    properties:
      endpoints:
        type: "array"
        items:
          $ref: "#/definitions/EndpointStorageGetResponse"
      pagination:
        description: "Pagination Object"
        $ref: "#/definitions/Pagination"
    example:
      endpoints:
      - access_key_id: "access_key_id"
        bucket: "bucket"
        endpoint: "https://us-east-1.your-s3-provider.com"
        last_updated: "2022-01-01 00:00:00.000000"
        create_time: "2022-01-01 00:00:00.000000"
        name: "name"
      - access_key_id: "access_key_id"
        bucket: "bucket"
        endpoint: "https://us-east-1.your-s3-provider.com"
        last_updated: "2022-01-01 00:00:00.000000"
        create_time: "2022-01-01 00:00:00.000000"
        name: "name"
      pagination:
        number: 6
        has_previous: true
        next_page_number: 1
        has_next: true
        paginator:
          num_pages: 5
        previous_page_number: 5
  EndpointStoragePatchPayload:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the Endpoint Storage"
      access_key_id:
        type: "string"
        description: "Your access key ID to connect to your S3 Bucket."
      endpoint:
        type: "string"
        example: "https://us-east-1.your-s3-provider.com"
        description: "Full URL to your S3 Bucket with https or http. It's recommended\
          \ to not include your bucket name as a subdomain"
      bucket:
        type: "string"
        description: "Your secret access key to connect to your S3 Bucket. Will be\
          \ encrypted."
      secret_access_key:
        type: "string"
        description: "Your secret access key to connect to your S3 Bucket. Will be\
          \ encrypted."
    example:
      access_key_id: "access_key_id"
      bucket: "bucket"
      endpoint: "https://us-east-1.your-s3-provider.com"
      name: "name"
      secret_access_key: "secret_access_key"
  EndpointStoragePatchResponse:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the Endpoint Storage"
      access_key_id:
        type: "string"
        description: "Your access key ID to connect to your S3 Bucket."
      endpoint:
        type: "string"
        example: "https://us-east-1.your-s3-provider.com"
        description: "Full URL to your S3 Bucket with https or http. It's recommended\
          \ to not include your bucket name as a subdomain"
      bucket:
        type: "string"
        description: "Your secret access key to connect to your S3 Bucket. Will be\
          \ encrypted."
      create_time:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of endpoint storage creation"
      last_updated:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of endpoint storage last update"
    example:
      access_key_id: "access_key_id"
      bucket: "bucket"
      endpoint: "https://us-east-1.your-s3-provider.com"
      last_updated: "2022-01-01 00:00:00.000000"
      create_time: "2022-01-01 00:00:00.000000"
      name: "name"
  EndpointStoragePostPayload:
    type: "object"
    required:
    - "access_key_id"
    - "bucket"
    - "endpoint"
    - "name"
    - "secret_access_key"
    properties:
      name:
        type: "string"
        description: "Name of the Endpoint Storage"
      access_key_id:
        type: "string"
        description: "Your access key ID to connect to your S3 Bucket."
      endpoint:
        type: "string"
        example: "https://us-east-1.your-s3-provider.com"
        description: "Full URL to your S3 Bucket with https or http. It's recommended\
          \ to not include your bucket name as a subdomain"
      bucket:
        type: "string"
        example: "The Bucket name you want your container logs to be stored in."
        description: "Your secret access key to connect to your S3 Bucket. Will be\
          \ encrypted."
      secret_access_key:
        type: "string"
        description: "Your secret access key to connect to your S3 Bucket. Will be\
          \ encrypted."
    example:
      access_key_id: "access_key_id"
      bucket: "The Bucket name you want your container logs to be stored in."
      endpoint: "https://us-east-1.your-s3-provider.com"
      name: "name"
      secret_access_key: "secret_access_key"
  EndpointStoragePostResponse:
    type: "object"
    required:
    - "access_key_id"
    - "bucket"
    - "endpoint"
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of the Endpoint Storage"
      access_key_id:
        type: "string"
        description: "Your access key ID to connect to your S3 Bucket."
      endpoint:
        type: "string"
        example: "https://us-east-1.your-s3-provider.com"
        description: "Full URL to your S3 Bucket with https or http. It's recommended\
          \ to not include your bucket name as a subdomain"
      bucket:
        type: "string"
        example: "The Bucket name you want your container logs to be stored in."
        description: "Your secret access key to connect to your S3 Bucket. Will be\
          \ encrypted."
      create_time:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of endpoint creation"
      last_updated:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of endpoint last update"
    example:
      access_key_id: "access_key_id"
      bucket: "The Bucket name you want your container logs to be stored in."
      endpoint: "https://us-east-1.your-s3-provider.com"
      last_updated: "2022-01-01 00:00:00.000000"
      create_time: "2022-01-01 00:00:00.000000"
      name: "name"
  PullProfileAppVersionLinkResponse:
    type: "object"
    required:
    - "app"
    - "app_version"
    - "endpoint"
    - "pull_profile"
    properties:
      app:
        type: "string"
        description: "Name of the linked app of the linked version"
      app_version:
        type: "string"
        description: "Name of the linked app version."
      endpoint:
        type: "string"
        description: "Name of the endpoint storage"
      pull_profile:
        type: "string"
        description: "Name of the pull profile the app version is linked to."
      create_time:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of link creation"
      last_updated:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of link last update"
    example:
      app: "app"
      endpoint: "endpoint"
      last_updated: "2022-01-01 00:00:00.000000"
      app_version: "app_version"
      create_time: "2022-01-01 00:00:00.000000"
      pull_profile: "pull_profile"
  PullProfileGetResponse:
    type: "object"
    required:
    - "destination"
    - "name"
    - "source"
    - "source_type"
    properties:
      name:
        type: "string"
        description: "Name of the pull profile"
      source:
        type: "string"
        example: "/my-bucket/config.cfg"
        description: "Source in the S3 bucket to fetch from"
      source_type:
        type: "string"
        example: "File"
        description: "If the source is a File or a Directory"
        enum:
        - "File"
        - "Folder"
      destination:
        type: "string"
        example: "/usr/share/configs"
        description: "Destination path where your source will be uploaded in your\
          \ container. Make sure to avoid protected destinations, such as `/etc/`,\
          \ as this will prevent the files from being copied to your deployment, and\
          \ will make your deployment fail. Make sure a normal user can write to the\
          \ destination folder."
      create_time:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of pull profile creation"
      last_updated:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of pull profile last update"
    example:
      last_updated: "2022-01-01 00:00:00.000000"
      create_time: "2022-01-01 00:00:00.000000"
      name: "name"
      destination: "/usr/share/configs"
      source_type: "File"
      source: "/my-bucket/config.cfg"
  PullProfilesListResponse:
    type: "object"
    properties:
      pull_profiles:
        type: "array"
        items:
          $ref: "#/definitions/PullProfileGetResponse"
      pagination:
        description: "Pagination Object"
        $ref: "#/definitions/Pagination"
    example:
      pagination:
        number: 6
        has_previous: true
        next_page_number: 1
        has_next: true
        paginator:
          num_pages: 5
        previous_page_number: 5
      pull_profiles:
      - last_updated: "2022-01-01 00:00:00.000000"
        create_time: "2022-01-01 00:00:00.000000"
        name: "name"
        destination: "/usr/share/configs"
        source_type: "File"
        source: "/my-bucket/config.cfg"
      - last_updated: "2022-01-01 00:00:00.000000"
        create_time: "2022-01-01 00:00:00.000000"
        name: "name"
        destination: "/usr/share/configs"
        source_type: "File"
        source: "/my-bucket/config.cfg"
  PullProfilePatchPayload:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the pull profile"
      source:
        type: "string"
        example: "/my-bucket/config.cfg"
        description: "Source in the S3 bucket to fetch from"
      source_type:
        type: "string"
        example: "File"
        description: "If the source is a File or a Directory"
        enum:
        - "File"
        - "Folder"
      destination:
        type: "string"
        example: "/usr/share/configs"
        description: "Destination path where your source will be uploaded in your\
          \ container. Make sure to avoid protected destinations, such as `/etc/`,\
          \ as this will prevent the files from being copied to your deployment, and\
          \ will make your deployment fail. Make sure a normal user can write to the\
          \ destination folder."
    example:
      name: "name"
      destination: "/usr/share/configs"
      source_type: "File"
      source: "/my-bucket/config.cfg"
  PulloProfilePatchResponse:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the pull profile"
      source:
        type: "string"
        example: "/my-bucket/config.cfg"
        description: "Source in the S3 bucket to fetch from"
      source_type:
        type: "string"
        example: "File"
        description: "If the source is a File or a Directory"
        enum:
        - "File"
        - "Folder"
      destination:
        type: "string"
        example: "/usr/share/configs"
        description: "Destination path where your source will be uploaded in your\
          \ container. Make sure to avoid protected destinations, such as `/etc/`,\
          \ as this will prevent the files from being copied to your deployment, and\
          \ will make your deployment fail. Make sure a normal user can write to the\
          \ destination folder."
      create_time:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of pull profile creation"
      last_updated:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of pull profile last update"
    example:
      last_updated: "2022-01-01 00:00:00.000000"
      create_time: "2022-01-01 00:00:00.000000"
      name: "name"
      destination: "/usr/share/configs"
      source_type: "File"
      source: "/my-bucket/config.cfg"
  PullProfilePostPayload:
    type: "object"
    required:
    - "destination"
    - "name"
    - "source"
    - "source_type"
    properties:
      name:
        type: "string"
        description: "Name of the pull profile"
      source:
        type: "string"
        example: "/my-bucket/config.cfg"
        description: "Source in the S3 bucket to fetch from"
      source_type:
        type: "string"
        example: "File"
        description: "If the source is a File or a Directory"
        enum:
        - "File"
        - "Folder"
      destination:
        type: "string"
        example: "/usr/share/configs"
        description: "Destination path where your source will be uploaded in your\
          \ container. Make sure to avoid protected destinations, such as `/etc/`,\
          \ as this will prevent the files from being copied to your deployment, and\
          \ will make your deployment fail. Make sure a normal user can write to the\
          \ destination folder."
    example:
      name: "name"
      destination: "/usr/share/configs"
      source_type: "File"
      source: "/my-bucket/config.cfg"
  PullProfilePostResponse:
    type: "object"
    required:
    - "destination"
    - "name"
    - "source"
    - "source_type"
    properties:
      name:
        type: "string"
        description: "Name of the pull profile"
      source:
        type: "string"
        example: "/my-bucket/config.cfg"
        description: "Source in the S3 bucket to fetch from"
      source_type:
        type: "string"
        example: "File"
        description: "If the source is a File or a Directory"
        enum:
        - "File"
        - "Folder"
      destination:
        type: "string"
        example: "/usr/share/configs"
        description: "Destination path where your source will be uploaded in your\
          \ container. Make sure to avoid protected destinations, such as `/etc/`,\
          \ as this will prevent the files from being copied to your deployment, and\
          \ will make your deployment fail. Make sure a normal user can write to the\
          \ destination folder."
      create_time:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of pull profile creation"
      last_updated:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of pull profile last update"
    example:
      last_updated: "2022-01-01 00:00:00.000000"
      create_time: "2022-01-01 00:00:00.000000"
      name: "name"
      destination: "/usr/share/configs"
      source_type: "File"
      source: "/my-bucket/config.cfg"
  RelaySessionCreatePayload:
    type: "object"
    required:
    - "users"
    properties:
      users:
        type: "array"
        description: "List of IP Addresses of session users"
        items:
          $ref: "#/definitions/RelaySessionUser"
        minItems: 1
      filters:
        type: "array"
        description: "List of location filters to apply to the session"
        items:
          $ref: "#/definitions/RelayFilterModel"
      webhook_url:
        type: "string"
        example: "https://my-webhook.com/dump"
        description: "URL to send the session data to"
    example:
      webhook_url: "https://my-webhook.com/dump"
      filters:
      - field: "field"
        filter_type: "any"
        values:
        - "values"
        - "values"
      - field: "field"
        filter_type: "any"
        values:
        - "values"
        - "values"
      users:
      - ip: "1.1.1.1"
      - ip: "1.1.1.1"
  RelaySessionUser:
    type: "object"
    required:
    - "ip"
    properties:
      ip:
        type: "string"
        example: "1.1.1.1"
        description: "IP Address of session user"
    example:
      ip: "1.1.1.1"
    additionalProperties: false
  RelayFilterModel:
    type: "object"
    required:
    - "field"
    - "filter_type"
    - "values"
    properties:
      field:
        type: "string"
        description: "The field to filter"
      values:
        type: "array"
        description: "The values to filter"
        items:
          type: "string"
      filter_type:
        type: "string"
        example: "any"
        description: "The type of filter"
        enum:
        - "any"
        - "all"
        - "not"
    example:
      field: "field"
      filter_type: "any"
      values:
      - "values"
      - "values"
  RelaySessionBaseResponse:
    type: "object"
    required:
    - "linked"
    - "ready"
    - "session_id"
    - "status"
    properties:
      session_id:
        type: "string"
        description: "The session ID"
      authorization_token:
        type: "integer"
        example: 3500589645
        description: "The authorization token for the session"
      status:
        type: "string"
        description: "The status of the session"
      ready:
        type: "boolean"
        description: "If the session is ready to be used"
      linked:
        type: "boolean"
        description: "If the session is linked to a relay"
      error:
        type: "string"
        description: "The error message if the session failed"
      session_users:
        type: "array"
        description: "List Session Users"
        items:
          $ref: "#/definitions/RelaySessionUserResponse"
      relay:
        $ref: "#/definitions/RelaySessionBaseResponse_relay"
      webhook_url:
        type: "string"
        example: "https://my-webhook.com/dump"
        description: "The webhook URL that we will call once the session is ready"
    example:
      webhook_url: "https://my-webhook.com/dump"
      authorization_token: 3500589645
      ready: true
      relay: {}
      session_id: "session_id"
      error: "error"
      status: "status"
      linked: true
      session_users:
      - authorization_token: 21986334
        latitude: 45.50880000000000080717654782347381114959716796875
        ip_address: "1.1.1.1"
        longitude: -73.5878000000000014324541552923619747161865234375
      - authorization_token: 21986334
        latitude: 45.50880000000000080717654782347381114959716796875
        ip_address: "1.1.1.1"
        longitude: -73.5878000000000014324541552923619747161865234375
  RelaySessionUserResponse:
    type: "object"
    properties:
      ip_address:
        type: "string"
        example: "1.1.1.1"
        description: "The IP Address of the user"
      latitude:
        type: "number"
        example: 45.50880000000000080717654782347381114959716796875
        description: "The latitude of the user"
      longitude:
        type: "number"
        example: -73.5878000000000014324541552923619747161865234375
        description: "The longitude of the user"
      authorization_token:
        type: "integer"
        example: 21986334
        description: "The authorization token of the user"
    example:
      authorization_token: 21986334
      latitude: 45.50880000000000080717654782347381114959716796875
      ip_address: "1.1.1.1"
      longitude: -73.5878000000000014324541552923619747161865234375
  RelayResponse:
    type: "object"
    properties:
      ip:
        type: "string"
        example: "2.2.2.2"
        description: "The IP Address of the relay"
      host:
        type: "string"
        example: "7349356945f1.st.edgegap.net"
        description: "The host of the relay"
      ports:
        $ref: "#/definitions/MappedPortResponse"
  MappedPortResponse:
    type: "object"
    properties:
      server:
        $ref: "#/definitions/ServerRelayPort"
      client:
        $ref: "#/definitions/ClientRelayPort"
  ServerRelayPort:
    type: "object"
    properties:
      port:
        type: "integer"
        example: 32000
        description: "The port number"
      protocol:
        type: "string"
        example: "UDP"
        description: "The protocol of the port"
      link:
        type: "string"
        example: "7349356945f1.st.edgegap.net:32000"
        description: "The link to the port"
  ClientRelayPort:
    type: "object"
    properties:
      port:
        type: "integer"
        example: 32001
        description: "The port number"
      protocol:
        type: "string"
        example: "UDP"
        description: "The protocol of the port"
      link:
        type: "string"
        example: "7349356945f1.st.edgegap.net:32001"
        description: "The link to the port"
  RelaySessionListResponse:
    type: "object"
    properties:
      sessions:
        type: "array"
        description: "List of relay sessions"
        items:
          $ref: "#/definitions/RelaySessionBaseResponse"
      pagination:
        description: "Pagination Object"
        $ref: "#/definitions/Pagination"
    example:
      sessions:
      - webhook_url: "https://my-webhook.com/dump"
        authorization_token: 3500589645
        ready: true
        relay: {}
        session_id: "session_id"
        error: "error"
        status: "status"
        linked: true
        session_users:
        - authorization_token: 21986334
          latitude: 45.50880000000000080717654782347381114959716796875
          ip_address: "1.1.1.1"
          longitude: -73.5878000000000014324541552923619747161865234375
        - authorization_token: 21986334
          latitude: 45.50880000000000080717654782347381114959716796875
          ip_address: "1.1.1.1"
          longitude: -73.5878000000000014324541552923619747161865234375
      - webhook_url: "https://my-webhook.com/dump"
        authorization_token: 3500589645
        ready: true
        relay: {}
        session_id: "session_id"
        error: "error"
        status: "status"
        linked: true
        session_users:
        - authorization_token: 21986334
          latitude: 45.50880000000000080717654782347381114959716796875
          ip_address: "1.1.1.1"
          longitude: -73.5878000000000014324541552923619747161865234375
        - authorization_token: 21986334
          latitude: 45.50880000000000080717654782347381114959716796875
          ip_address: "1.1.1.1"
          longitude: -73.5878000000000014324541552923619747161865234375
      pagination:
        number: 6
        has_previous: true
        next_page_number: 1
        has_next: true
        paginator:
          num_pages: 5
        previous_page_number: 5
  RelayUserAuthorizePayload:
    type: "object"
    required:
    - "session_id"
    - "user_ip"
    properties:
      session_id:
        type: "string"
        description: "Session Request ID (ex: 0724828881e2-S)"
      user_ip:
        type: "string"
        description: "User Ip to Authorize"
    example:
      user_ip: "user_ip"
      session_id: "session_id"
  RelaySessionUserBaseResponse:
    type: "object"
    required:
    - "linked"
    - "ready"
    - "session_id"
    - "status"
    properties:
      session_id:
        type: "string"
        description: "The session ID"
      authorization_token:
        type: "integer"
        example: 3500589645
        description: "The authorization token for the session"
      status:
        type: "string"
        description: "The status of the session"
      ready:
        type: "boolean"
        description: "If the session is ready to be used"
      linked:
        type: "boolean"
        description: "If the session is linked to a relay"
      error:
        type: "string"
        description: "The error message if the session failed"
      session_user:
        $ref: "#/definitions/RelaySessionUserBaseResponse_session_user"
      relay:
        $ref: "#/definitions/RelaySessionBaseResponse_relay"
      webhook_url:
        type: "string"
        example: "https://my-webhook.com/dump"
        description: "The webhook URL that we will call once the session is ready"
    example:
      webhook_url: "https://my-webhook.com/dump"
      authorization_token: 3500589645
      ready: true
      relay: {}
      session_id: "session_id"
      error: "error"
      session_user: {}
      status: "status"
      linked: true
  RelayUserRevokePayload:
    type: "object"
    required:
    - "authorization_token"
    - "session_id"
    properties:
      session_id:
        type: "string"
        description: "Session Request ID (ex: 0724828881e2-S)"
      authorization_token:
        type: "integer"
        description: "Relay Authorization Token"
    example:
      authorization_token: 0
      session_id: "session_id"
  LobbyCreatePayload:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of the lobby"
    example:
      name: "name"
    additionalProperties: false
  LobbyReadResponse:
    type: "object"
    required:
    - "name"
    - "status"
    - "url"
    properties:
      name:
        type: "string"
        description: "Name of the lobby"
      url:
        type: "string"
        description: "URL of the lobby"
      status:
        type: "string"
        description: "Status of the lobby"
    example:
      name: "name"
      url: "url"
      status: "status"
    additionalProperties: false
  LobbyDeployPayload:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of the lobby"
    example:
      name: "name"
    additionalProperties: false
  LobbyTerminatePayload:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of the lobby"
    example:
      name: "name"
    additionalProperties: false
  DeploymentTagPayload:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "v1.0.0"
        description: "The name of the tag"
        maxLength: 20
    example:
      name: "v1.0.0"
  DeploymentTagResponse:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "The name of the tag"
      create_time:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of policy creation"
      last_updated:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of policy last update"
    example:
      last_updated: "2022-01-01 00:00:00.000000"
      create_time: "2022-01-01 00:00:00.000000"
      name: "name"
  DeploymentTagListResponse:
    type: "object"
    properties:
      tags:
        type: "array"
        items:
          $ref: "#/definitions/DeploymentTagResponse"
      count:
        type: "integer"
      pagination:
        type: "object"
        properties: {}
    example:
      pagination: "{}"
      count: 0
      tags:
      - last_updated: "2022-01-01 00:00:00.000000"
        create_time: "2022-01-01 00:00:00.000000"
        name: "name"
      - last_updated: "2022-01-01 00:00:00.000000"
        create_time: "2022-01-01 00:00:00.000000"
        name: "name"
  ContextDeploymentTagResponse:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "deployment-tag-name"
        description: "Name of the tag"
      create_time:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of tag creation"
      last_updated:
        type: "string"
        example: "2022-01-01 00:00:00.000000"
        description: "UTC time of tag last update"
    example:
      last_updated: "2022-01-01 00:00:00.000000"
      create_time: "2022-01-01 00:00:00.000000"
      name: "deployment-tag-name"
  Monitor:
    type: "object"
    required:
    - "host"
    - "host_url"
    - "name"
    - "spec_url"
    - "version"
    properties:
      name:
        type: "string"
        description: "API Name"
      version:
        type: "string"
        description: "API Version"
      host:
        type: "string"
        description: "API Host"
      host_url:
        type: "string"
        description: "API Host URL"
      spec_url:
        type: "string"
        description: "API Swagger Specification Location"
      messages:
        type: "array"
        description: "API Messages"
        items:
          type: "string"
      errors:
        type: "array"
        description: "API Errors"
        items:
          type: "string"
    example:
      spec_url: "spec_url"
      host_url: "host_url"
      name: "name"
      host: "host"
      messages:
      - "messages"
      - "messages"
      version: "version"
      errors:
      - "errors"
      - "errors"
  payload:
    type: "object"
    properties:
      name:
        type: "string"
  SelectorModel_env:
    type: "object"
    description: "Environment Variable to inject in new Deployment created by App\
      \ Version with auto-deploy"
  MatchmakerComponentResponse_credentials:
    type: "object"
    description: "Private repo credentials to use for pulling the image, if applicable."
  RelaySessionBaseResponse_relay:
    type: "object"
    description: "The relay details the session is linked to"
  RelaySessionUserBaseResponse_session_user:
    type: "object"
    description: "List Session Users"
responses:
  ParseError:
    description: "When a mask can't be parsed"
  MaskError:
    description: "When any error occurs on mask"
